var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.088,1,2.215]],["body/controllers/AppController.html",[0,2.078,1,3.813,2,1.564,3,0.412,4,0.362,5,0.362,6,4.051,7,0.362,8,3.813,9,0.493,10,0.027,11,1.1,12,3.386,13,4.051,14,0.412,15,0.019,16,2.888,17,1.182,18,0.023,19,0.023]],["title/modules/AppModule.html",[20,0.947,21,2.215]],["body/modules/AppModule.html",[1,3.413,2,1.47,3,0.282,4,0.249,5,0.249,7,0.341,8,3.413,9,0.543,10,0.028,11,0.754,12,3.296,13,2.778,14,0.282,15,0.013,18,0.018,19,0.018,20,1.738,21,4.444,22,1.428,23,1.54,24,1.812,25,1.812,26,1.54,27,2.832,28,1.812,29,2.778,30,2.778,31,2.778,32,3.296,33,3.603,34,3.603,35,3.603,36,3.033,37,2.482,38,1.812,39,1.812,40,3.294,41,5.149,42,2.832,43,1.981,44,1.428,45,3.294,46,3.294,47,3.294,48,2.778,49,3.294,50,1.428,51,2.183,52,3.294,53,3.294,54,2.438,55,3.294,56,0.65,57,4.514,58,3.294,59,3.294,60,3.294,61,3.294,62,2.778,63,2.183,64,3.294,65,2.183,66,2.438,67,3.294,68,1.812,69,3.294,70,3.294,71,2.284,72,3.294]],["title/injectables/AppService.html",[12,1.838,73,1.253]],["body/injectables/AppService.html",[3,0.385,4,0.339,5,0.339,7,0.339,8,3.661,9,0.385,10,0.027,11,1.029,12,3.038,14,0.385,15,0.017,18,0.022,19,0.022,73,2.071,74,2.471,75,3.789,76,3.038,77,0.759,78,2.583,79,6.24,80,0.956,81,4.494,82,6.405,83,3.431,84,2.583,85,2.242,86,2.101,87,4.494]],["title/controllers/AuthController.html",[0,1.088,88,2.215]],["body/controllers/AuthController.html",[0,1.984,2,1.526,3,0.402,4,0.354,5,0.354,7,0.354,9,0.522,10,0.027,11,1.073,14,0.402,15,0.018,16,2.818,17,1.153,18,0.022,19,0.022,88,3.756,89,3.952,90,2.818,91,5.137,92,2.818,93,1.757,94,3.083,95,3.952,96,4.686,97,4.686]],["title/modules/AuthModule.html",[20,0.947,32,1.838]],["body/modules/AuthModule.html",[2,1.736,3,0.364,4,0.32,5,0.32,9,0.524,10,0.027,11,0.972,14,0.364,15,0.016,18,0.021,19,0.021,20,1.651,22,1.84,23,1.985,24,2.334,25,2.334,26,1.985,27,3.206,28,3.206,32,3.589,36,2.698,37,2.932,38,2.334,39,2.334,42,2.334,88,3.864,94,3.43,95,3.579,98,3.579,99,3.579,100,3.579,101,4.244,102,3.534,103,4.244,104,4.244]],["title/injectables/AuthService.html",[73,1.253,94,1.691]],["body/injectables/AuthService.html",[3,0.253,4,0.223,5,0.223,7,0.315,9,0.416,10,0.028,11,0.957,14,0.253,15,0.011,17,0.726,18,0.017,19,0.017,54,2.184,56,1.043,62,4.094,63,3.501,73,1.567,74,1.623,76,2.904,77,0.498,78,1.955,80,1.124,84,2.27,85,2.17,86,2.47,91,3.525,94,2.116,102,1.956,105,2.489,106,2.771,107,2.514,108,3.094,109,3.13,110,4.1,111,3.908,112,4.181,113,4.181,114,3.175,115,2.489,116,2.893,117,2.951,118,2.672,119,1.98,120,1.496,121,4.181,122,1.474,123,2.951,124,2.184,125,2.771,126,4.181,127,2.951,128,1.581,129,4.181,130,2.951,131,4.181,132,1.956,133,2.184,134,2.489,135,1.956,136,1.493,137,2.489,138,1.956,139,3.525,140,2.951,141,1.031,142,1.493,143,1.623,144,2.771,145,2.919,146,4.181,147,2.951,148,1.189,149,2.951,150,2.951,151,2.771,152,2.514,153,3.218,154,1.955,155,2.951,156,2.951,157,2.951,158,1.956,159,2.489,160,2.951,161,3.094,162,2.951,163,2.489]],["title/classes/CreatePostDto.html",[15,0.013,164,1.838]],["body/classes/CreatePostDto.html",[3,0.12,4,0.106,5,0.106,7,0.456,9,0.435,10,0.028,14,0.12,15,0.017,17,1.568,18,0.009,19,0.009,50,1.533,56,1.215,66,1.737,71,2.641,77,0.237,80,1.11,83,1.291,85,2.109,93,0.526,120,1.635,122,0.713,141,0.82,142,0.71,143,1.291,148,0.945,152,1.411,154,1.218,164,1.291,165,0.608,166,4.503,167,1.038,168,1.411,169,2.484,170,1.188,171,1.556,172,1.891,173,0.985,174,3.025,175,4.401,176,2.005,177,2.239,178,3.504,179,2.551,180,2.82,181,3.368,182,2.397,183,3.139,184,3.993,185,1.585,186,2.608,187,1.556,188,2.836,189,1.403,190,1.403,191,2.608,192,1.403,193,1.403,194,2.608,195,2.608,196,1.403,197,1.403,198,1.789,199,1.403,200,1.737,201,1.188,202,1.979,203,1.403,204,1.403,205,1.403,206,1.664,207,2.982,208,4.255,209,4.255,210,1.819,211,2.551,212,1.403,213,1.403,214,2.608,215,2.347,216,1.979,217,2.347,218,3.025,219,3.025,220,1.403,221,1.403,222,2.551,223,2.347,224,2.617,225,2.347,226,3.536,227,3.025,228,3.025,229,1.183,230,1.403,231,1.403,232,3.588,233,3.588,234,1.979,235,1.979,236,1.979,237,1.979,238,1.979,239,1.556,240,1.403,241,2.912,242,2.551,243,2.551,244,2.551,245,1.403,246,1.403,247,1.737,248,2.347,249,1.664,250,1.403,251,1.403,252,3.536,253,1.403,254,1.403,255,1.403,256,2.82,257,2.994,258,2.347,259,1.403,260,1.737,261,2.912,262,1.84,263,1.979,264,2.347,265,1.737,266,2.558,267,2.716,268,1.038,269,1.737,270,1.737,271,2.347,272,0.93,273,1.183,274,1.183,275,0.565,276,1.038,277,1.038,278,1.183,279,1.183,280,1.403,281,1.403,282,1.979,283,1.403,284,1.183,285,1.183,286,1.183,287,1.979,288,1.403,289,1.403,290,1.403,291,1.403,292,2.347,293,1.183,294,2.347,295,1.979,296,1.038,297,1.038,298,2.347,299,1.038]],["title/classes/CreatePostMetaOptionsDto.html",[15,0.013,198,1.691]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.345,4,0.303,5,0.303,7,0.389,9,0.345,10,0.027,14,0.345,15,0.02,17,1.398,18,0.02,19,0.02,50,2.233,56,0.794,77,0.679,80,0.856,85,1.931,148,2.29,165,1.743,168,3.418,169,3.126,170,2.877,171,3.768,172,1.755,173,1.678,185,1.221,188,2.233,198,2.607,206,3.126,224,2.976,249,3.297,262,1.88,265,3.812,266,3.098,275,2.075,276,3.812,297,2.976,299,4.436,300,3.391,301,5.347,302,4.021,303,4.021,304,2.418]],["title/classes/CreateTagDto.html",[15,0.013,305,2.473]],["body/classes/CreateTagDto.html",[3,0.208,4,0.183,5,0.183,7,0.49,9,0.413,10,0.028,14,0.208,15,0.019,17,1.068,18,0.014,19,0.014,56,1.017,66,2.683,77,0.41,80,1.097,83,1.994,85,2.248,93,0.91,119,2.159,120,1.531,148,1.46,165,1.052,168,2.18,169,1.994,170,1.835,171,2.403,173,1.181,176,2.877,180,3.819,181,3.975,185,1.565,186,2.403,188,2.854,191,2.877,194,3.416,195,3.416,229,2.047,232,4.56,233,4.56,234,3.058,235,3.058,236,3.058,237,3.058,238,3.058,239,3.714,249,2.387,256,2.877,257,3.192,261,3.564,262,2.03,263,3.058,265,2.683,266,2.61,267,2.895,268,1.796,269,2.683,270,2.683,284,2.047,285,3.058,286,2.047,293,2.047,296,1.796,297,3.212,305,2.683,306,4.56,307,2.047,308,4.054,309,2.427,310,2.427,311,2.427,312,2.427,313,2.427,314,2.427,315,2.427,316,2.427,317,2.427,318,2.427,319,1.796,320,3.626]],["title/classes/CreateUserDto.html",[15,0.013,321,1.838]],["body/classes/CreateUserDto.html",[3,0.182,4,0.16,5,0.16,7,0.451,9,0.385,10,0.028,14,0.281,15,0.019,17,1.263,18,0.013,19,0.013,56,1.143,63,3.907,71,2.599,77,0.359,80,1.034,83,1.802,85,2.339,93,0.796,108,3.8,111,3.596,119,2.243,120,1.454,122,0.995,128,2.177,139,3.373,143,1.168,148,1.611,154,1.611,165,0.921,168,2.405,169,2.2,171,2.652,173,1.067,182,2.599,185,1.476,186,2.652,188,2.804,191,2.172,200,2.96,201,2.276,256,2.981,257,2.652,261,3.328,262,1.871,266,2.704,267,2.405,268,1.572,269,1.572,270,1.572,296,2.96,304,2.922,321,2.473,322,4.33,323,1.572,324,4.362,325,4.098,326,4.098,327,2.124,328,2.124,329,4.33,330,2.124,331,2.124,332,3.792,333,2.124,334,2.124,335,4.33,336,2.124,337,2.124,338,2.124,339,4.498,340,3.277,341,3.277,342,3.277,343,3.277,344,3.277,345,5.135,346,3.277,347,3.277,348,3.277,349,2.124,350,3.277,351,3.277,352,4.001,353,2.124,354,4.001,355,4.498,356,1.97,357,3.277,358,1.408,359,2.124]],["title/classes/GetUsersParamDto.html",[15,0.013,360,2.215]],["body/classes/GetUsersParamDto.html",[3,0.35,4,0.308,5,0.308,7,0.393,9,0.491,10,0.027,14,0.35,15,0.022,17,1.409,18,0.021,19,0.021,56,1.131,77,0.69,80,0.869,93,1.531,120,1.474,122,1.739,128,1.964,141,2.26,142,2.634,165,1.771,170,2.634,173,1.695,185,1.241,188,2.614,191,2.708,257,3.45,260,3.851,262,1.911,267,3.129,272,2.708,360,3.45,361,3.851,362,3.316,363,3.445,364,4.389,365,4.086,366,4.086]],["title/classes/GetUsersQueryDto.html",[15,0.013,367,2.01]],["body/classes/GetUsersQueryDto.html",[3,0.259,4,0.228,5,0.228,7,0.228,9,0.365,10,0.028,14,0.259,15,0.019,18,0.017,19,0.017,56,1.228,77,0.511,80,1.136,120,1.734,122,2.037,142,2.954,165,1.312,170,2.154,173,1.386,185,1.622,202,4.504,210,3.605,249,3.539,260,4.164,262,1.415,267,3.384,272,2.006,356,3.211,361,4.164,362,3.298,367,2.559,368,2.553,369,4.257,370,3.643,371,5.628,372,5.996,373,4.151,374,5.341,375,3.027,376,4.257,377,4.257,378,3.027,379,3.027,380,4.923,381,3.027,382,5.628]],["title/entities/MetaOption.html",[383,1.346,384,1.563]],["body/entities/MetaOption.html",[3,0.278,4,0.245,5,0.245,7,0.337,9,0.472,10,0.027,14,0.278,15,0.013,18,0.018,19,0.018,50,2.65,56,1.178,68,1.785,77,0.548,80,1.228,85,1.915,122,1.552,141,2.016,172,1.79,173,1.455,185,1.753,201,2.261,214,4.127,224,3.306,249,1.785,275,2.403,299,4.073,304,3.309,383,2.325,384,2.089,385,3.587,386,2.737,387,4.523,388,5.505,389,5.505,390,4.308,391,3.245,392,3.387,393,3.245,394,2.151,395,2.961,396,3.245,397,2.737,398,4.468,399,4.468,400,3.245,401,3.245,402,4.308,403,3.245,404,2.961,405,2.389,406,3.767,407,4.468,408,2.737,409,1.307,410,1.951,411,2.737,412,3.245,413,3.245,414,3.245]],["title/controllers/MetaOptionsController.html",[0,1.088,415,2.215]],["body/controllers/MetaOptionsController.html",[0,1.908,2,1.104,3,0.29,4,0.256,5,0.256,7,0.423,9,0.502,10,0.028,11,1.053,14,0.29,15,0.013,16,2.038,17,0.834,18,0.018,19,0.018,20,0.96,50,2.795,51,3.05,56,0.669,77,0.572,78,2.152,80,0.721,84,2.152,86,1.585,90,2.038,92,2.038,93,1.27,107,2.767,109,2.644,114,2.038,118,1.715,119,1.27,120,0.96,136,2.329,154,1.854,172,1.48,182,1.715,185,1.029,198,3.129,206,3.4,275,1.854,277,2.508,387,3.867,409,2.258,415,3.464,416,2.858,417,5.226,418,3.389,419,2.508,420,3.389,421,3.405,422,3.405,423,3.405,424,3.389,425,3.405,426,4.602,427,4.602,428,3.05,429,3.405,430,3.405,431,3.405,432,3.223,433,2.858,434,2.858,435,1.864,436,3.389,437,3.389,438,2.508,439,3.389]],["title/modules/MetaOptionsModule.html",[20,0.947,33,2.01]],["body/modules/MetaOptionsModule.html",[2,1.695,3,0.35,4,0.308,5,0.308,7,0.393,9,0.534,10,0.027,11,0.935,14,0.35,15,0.016,18,0.021,19,0.021,20,1.833,22,1.771,23,1.911,24,2.247,25,2.247,26,1.911,27,3.15,28,2.247,33,3.89,37,2.862,38,2.247,39,2.247,42,2.247,43,2.456,44,1.771,50,2.614,51,2.708,206,3.15,275,1.646,384,1.911,415,3.796,432,3.502,433,3.445,434,3.445,440,3.445,441,3.445,442,4.086,443,3.445,444,2.456,445,4.086,446,4.086]],["title/injectables/MetaOptionsService.html",[73,1.253,432,1.838]],["body/injectables/MetaOptionsService.html",[3,0.285,4,0.251,5,0.251,7,0.39,9,0.515,10,0.028,11,1.039,14,0.285,15,0.013,17,0.817,18,0.018,19,0.018,20,0.941,44,1.44,50,2.714,56,0.896,73,1.702,74,1.827,76,3.201,77,0.561,78,2.123,80,0.966,84,2.123,86,1.554,109,2.617,110,3.428,114,3.342,118,2.298,119,1.702,120,1.286,125,2.202,132,2.202,135,2.202,136,2.298,138,2.202,144,2.202,145,1.998,151,2.202,152,1.998,153,2.202,154,2.083,158,2.202,172,0.941,198,3.041,206,3.201,275,2.083,277,2.459,384,2.123,387,3.36,405,1.554,409,2.42,432,2.845,435,1.827,443,2.802,444,1.998,447,4.362,448,2.802,449,3.323,450,3.685,451,3.323,452,5.173,453,4.541,454,3.323,455,3.36,456,2.459,457,2.802,458,2.802,459,3.323,460,2.802,461,2.802,462,3.323,463,2.459]],["title/classes/PatchPostDto.html",[15,0.013,464,2.01]],["body/classes/PatchPostDto.html",[3,0.339,4,0.299,5,0.299,7,0.385,9,0.484,10,0.027,14,0.339,15,0.02,17,1.388,18,0.02,19,0.02,56,0.781,77,0.668,80,0.842,93,1.484,122,1.549,141,2.243,142,2.581,148,2.054,164,2.177,165,1.716,167,2.929,168,3.067,169,2.805,170,2.581,172,1.788,173,1.661,185,1.202,186,2.624,188,2.584,256,3.381,262,1.851,266,3.067,409,1.594,464,3.067,465,4.301,466,5.101,467,4.301,468,5.101,469,5.96,470,4.41,471,3.959,472,3.959,473,3.338,474,5.101,475,2.929]],["title/classes/PatchUserDto.html",[15,0.013,476,2.215]],["body/classes/PatchUserDto.html",[3,0.403,4,0.355,5,0.355,7,0.428,9,0.487,10,0.027,14,0.403,15,0.018,18,0.022,19,0.022,128,1.986,165,2.038,170,3.087,321,2.585,323,3.478,409,1.893,467,4.788,473,3.964,476,3.763,477,3.964,478,6.101,479,5.678,480,3.964,481,3.964,482,3.478]],["title/entities/Post.html",[172,0.947,383,1.346]],["body/entities/Post.html",[3,0.176,4,0.155,5,0.155,7,0.241,9,0.434,10,0.027,14,0.176,15,0.008,17,0.963,18,0.013,19,0.013,50,0.89,56,1.271,65,1.361,68,1.129,71,3.138,76,1.129,77,0.347,80,1.263,85,2.36,120,1.625,122,1.189,128,1.649,141,1.671,143,2.631,172,1.756,173,1.039,175,4.034,176,2.927,177,3.747,178,4.246,179,3.724,180,3.357,181,3.171,182,2.421,183,3.171,184,4.034,185,1.802,187,2.595,194,1.361,195,1.361,198,1.039,201,2.766,206,1.129,207,4.608,214,2.927,216,2.691,222,1.731,239,1.361,241,3.747,247,2.361,273,1.731,274,1.731,275,0.827,279,2.691,304,3.513,319,2.361,356,3.658,358,2.115,383,1.779,384,2.065,385,1.234,392,2.595,394,3.721,395,4.173,397,1.731,404,3.803,405,1.492,406,2.691,411,2.691,444,1.234,460,1.731,461,1.731,483,1.731,484,2.053,485,3.191,486,2.053,487,3.724,488,3.911,489,2.053,490,3.747,491,3.747,492,2.691,493,2.053,494,2.053,495,3.191,496,2.691,497,2.053,498,2.053,499,2.053,500,2.053,501,2.053,502,2.053,503,3.191,504,2.053,505,2.053,506,3.191,507,2.053,508,1.731,509,2.053,510,2.053,511,1.731,512,1.731]],["title/controllers/PostsController.html",[0,1.088,513,2.215]],["body/controllers/PostsController.html",[0,1.352,2,0.734,3,0.193,4,0.17,5,0.17,7,0.435,9,0.451,10,0.028,11,0.785,14,0.193,15,0.009,16,1.356,17,0.555,18,0.014,19,0.014,56,0.916,77,0.381,78,1.604,80,0.987,84,2.634,86,2.17,90,1.356,92,1.356,93,0.845,106,2.274,107,3.539,109,3.07,118,2.348,119,1.739,120,1.314,122,1.753,124,2.539,128,1.117,136,2.526,141,1.837,148,1.382,154,1.382,164,3.006,172,1.831,182,2.348,185,1.409,188,2.502,409,1.869,410,2.79,419,1.669,421,2.539,422,2.539,423,4.169,425,4.169,428,3.734,429,2.539,430,3.694,431,3.694,435,1.24,438,3.434,464,3.47,470,2.539,475,2.539,513,2.274,514,1.902,515,3.734,516,3.431,517,3.825,518,3.431,519,4.153,520,2.255,521,4.153,522,2.255,523,4.751,524,1.902,525,2.255,526,4.434,527,2.539,528,2.255,529,2.255,530,2.255,531,2.255,532,2.893,533,2.255,534,2.255,535,2.255,536,1.902,537,2.255,538,1.669,539,2.893,540,2.893,541,1.669,542,2.284,543,1.902,544,2.255,545,2.255,546,4.21,547,4.153,548,2.255,549,2.255,550,2.255,551,2.255,552,2.255,553,1.902,554,1.902,555,2.255,556,2.255,557,2.255]],["title/modules/PostsModule.html",[20,0.947,34,2.01]],["body/modules/PostsModule.html",[2,1.653,3,0.337,4,0.296,5,0.296,7,0.383,9,0.549,10,0.027,11,0.899,14,0.337,15,0.015,18,0.02,19,0.02,20,1.816,22,1.703,23,1.837,24,2.16,25,2.16,26,1.837,27,3.092,28,2.16,34,3.948,36,3.189,37,2.791,38,2.16,39,2.16,42,2.791,43,2.362,44,1.703,48,3.313,172,1.113,275,1.582,384,2.373,385,2.362,444,2.362,513,3.727,515,3.727,542,3.466,543,3.313,558,3.313,559,3.928,560,3.313,561,3.928,562,3.928,563,3.313,564,3.928]],["title/injectables/PostsService.html",[73,1.253,542,1.838]],["body/injectables/PostsService.html",[3,0.168,4,0.148,5,0.148,7,0.232,9,0.474,10,0.028,11,0.705,14,0.168,15,0.008,17,0.935,18,0.012,19,0.012,44,0.85,56,0.981,65,3.567,71,1.558,73,1.154,74,1.078,76,2.369,77,0.331,78,1.44,80,1.057,83,1.078,84,2.648,85,1.154,86,2.43,106,2.041,107,1.851,109,3.081,110,4.036,114,2.59,115,1.653,116,2.516,118,2.514,119,1.862,120,1.407,122,1.782,124,2.278,125,3.103,128,0.638,132,1.3,133,1.451,134,1.653,135,1.3,136,2.723,138,2.52,141,2.016,144,2.855,145,2.814,148,1.735,151,2.855,152,2.59,153,3.293,154,2.167,158,3.103,159,1.653,161,2.278,164,2.732,172,1.82,177,1.451,275,0.79,383,0.79,384,0.917,385,1.179,405,0.917,409,1.885,410,2.59,435,1.078,444,1.179,450,3.444,455,4.191,456,1.451,457,3.947,458,1.653,463,2.813,464,3.327,475,2.278,496,1.653,511,1.653,512,1.653,515,3.754,517,2.52,524,2.596,527,1.451,541,1.451,542,1.693,563,1.653,565,1.653,566,2.596,567,3.079,568,4.681,569,1.961,570,3.079,571,1.961,572,1.961,573,3.079,574,3.079,575,1.961,576,2.596,577,3.079,578,1.961,579,2.596,580,3.079,581,1.961,582,1.961,583,1.961,584,1.961,585,1.961,586,1.961,587,2.596,588,1.961,589,1.961,590,1.961,591,1.961]],["title/entities/Tag.html",[308,2.01,383,1.346]],["body/entities/Tag.html",[3,0.225,4,0.199,5,0.199,7,0.434,9,0.33,10,0.027,14,0.225,15,0.01,18,0.015,19,0.015,56,1.26,68,1.447,71,3.094,77,0.444,80,1.28,85,2.41,119,1.998,120,1.577,122,1.382,141,1.861,143,2.503,173,1.254,176,3.32,180,3.533,181,3.533,185,1.827,194,1.744,195,1.744,201,2.535,214,4.154,239,1.744,304,3.617,308,3.837,319,3.706,356,3.348,358,3.32,383,2.147,390,3.838,392,3.017,394,3.533,395,4.052,402,3.838,404,3.691,405,1.8,409,1.06,410,1.582,487,4.224,488,3.368,490,4.12,491,4.12,492,3.246,517,1.744,592,2.219,593,5.009,594,5.009,595,5.009,596,2.632,597,4.552,598,2.632,599,2.632,600,2.632,601,2.632,602,2.632,603,2.632,604,2.632,605,2.632,606,2.632,607,2.632]],["title/controllers/TagsController.html",[0,1.088,608,2.215]],["body/controllers/TagsController.html",[0,2.013,2,1.579,3,0.416,4,0.366,5,0.366,7,0.366,9,0.496,10,0.027,11,1.11,14,0.416,15,0.019,18,0.023,19,0.023,90,2.916,92,2.916,93,1.818,183,4.098,608,3.834,609,4.089,610,4.85,611,4.85]],["title/modules/TagsModule.html",[20,0.947,35,2.01]],["body/modules/TagsModule.html",[2,1.812,3,0.39,4,0.343,5,0.343,7,0.42,9,0.537,10,0.027,11,1.041,14,0.39,15,0.018,18,0.022,19,0.022,20,1.852,22,1.971,35,3.615,42,2.501,43,2.734,44,1.971,183,3.985,308,2.734,608,3.985,612,4.547,613,4.547,614,4.547,615,4.547]],["title/entities/User.html",[128,1.088,383,1.346]],["body/entities/User.html",[3,0.241,4,0.212,5,0.212,7,0.305,9,0.405,10,0.027,14,0.241,15,0.011,17,1.504,18,0.016,19,0.016,56,1.253,63,3.626,68,1.546,71,2.614,77,0.474,80,1.248,85,2.379,108,2.079,111,3.822,119,1.513,120,1.143,122,1.435,128,2.046,141,1.911,143,1.546,172,1.463,173,1.315,182,1.422,185,1.782,201,3.14,324,4.048,325,4.356,326,4.356,329,2.37,332,4.613,335,2.37,356,3.106,358,2.676,383,2.203,392,3.132,394,3.626,395,4.113,404,4.207,405,1.888,408,2.37,488,2.079,490,4.443,491,4.443,515,3.626,616,2.37,617,6.004,618,2.81,619,2.81,620,2.81,621,2.81,622,2.81,623,2.81,624,2.81,625,4.038,626,2.81,627,4.038]],["title/controllers/UsersController.html",[0,1.088,628,2.215]],["body/controllers/UsersController.html",[0,1.24,2,0.64,3,0.168,4,0.148,5,0.148,7,0.449,9,0.475,10,0.028,11,0.872,14,0.168,15,0.008,16,1.182,17,0.483,18,0.012,19,0.012,56,1.063,77,0.332,78,1.443,80,0.918,84,2.519,86,2.017,90,1.182,92,1.182,93,0.737,106,2.045,107,3.408,109,2.972,116,1.781,118,2.183,119,1.864,120,1.222,122,1.831,128,2.035,136,2.725,141,1.737,142,0.995,145,1.855,148,1.243,154,1.737,172,1.079,182,2.183,185,1.31,188,2.546,200,3.192,201,2.183,210,2.99,321,2.735,360,3.447,362,3.177,367,3.238,370,3.68,373,2.602,409,1.737,410,1.855,419,1.454,421,2.283,422,2.283,423,3.849,425,3.985,428,3.757,429,2.818,430,3.468,431,3.468,435,1.081,438,3.192,470,2.283,476,3.757,482,2.283,517,3.297,523,4.542,526,4.194,527,2.283,532,2.602,536,1.657,538,2.283,539,3.211,540,3.637,541,1.454,546,3.637,553,1.657,554,1.657,628,2.045,629,1.657,630,2.602,631,3.085,632,3.808,633,3.808,634,1.657,635,3.808,636,1.966,637,1.966,638,4.687,639,1.966,640,1.966,641,1.966,642,1.966,643,1.966,644,1.966,645,1.966,646,1.966,647,1.966,648,1.966,649,3.808,650,1.966,651,2.602,652,1.966,653,1.657,654,1.657,655,1.966,656,1.966,657,1.966,658,1.966,659,1.966,660,1.966,661,1.966,662,1.966,663,1.966,664,1.966,665,1.966,666,1.966,667,1.966]],["title/modules/UsersModule.html",[20,0.947,36,1.691]],["body/modules/UsersModule.html",[2,1.661,3,0.339,4,0.299,5,0.299,7,0.385,9,0.541,10,0.027,11,0.906,14,0.339,15,0.015,18,0.02,19,0.02,20,1.819,22,1.716,23,1.851,24,2.177,25,2.177,26,1.851,27,3.103,28,3.103,32,2.805,36,3.293,37,2.805,38,2.177,39,2.177,42,2.177,43,2.38,44,1.716,102,3.381,116,3.14,128,1.289,362,3.103,628,3.74,654,3.338,668,3.338,669,3.338,670,3.338,671,3.959,672,3.959,673,3.338,674,3.959,675,3.959]],["title/injectables/UsersService.html",[73,1.253,116,1.563]],["body/injectables/UsersService.html",[3,0.178,4,0.157,5,0.157,7,0.384,9,0.47,10,0.028,11,0.737,14,0.178,15,0.008,17,0.792,18,0.013,19,0.013,44,0.899,54,1.535,56,0.877,65,3.372,73,1.206,74,1.141,76,2.644,77,0.35,78,1.505,80,0.945,83,1.77,84,2.379,86,2.077,94,2.85,102,1.375,109,2.85,110,3.733,114,2.671,116,1.505,118,2.248,119,1.665,120,1.258,122,1.545,125,2.613,128,2.039,132,1.375,133,1.535,135,1.375,136,2.685,137,1.75,138,2.133,141,1.967,142,1.628,144,2.613,145,3.058,148,2.137,151,2.613,152,2.37,153,3.372,154,2.268,158,3.187,161,3.287,163,1.75,169,1.77,210,2.671,247,3.287,321,2.797,324,2.381,362,3.097,367,2.671,370,3.764,405,0.97,409,1.789,428,2.133,435,1.141,450,2.944,455,4.167,456,1.535,463,2.917,482,1.535,538,3.287,566,2.714,576,3.324,579,3.324,587,2.714,630,2.714,634,2.714,651,1.75,653,1.75,673,1.75,676,1.75,677,3.942,678,3.218,679,2.075,680,4.808,681,2.075,682,2.075,683,4.808,684,3.218,685,2.075,686,3.218,687,3.218,688,3.218,689,2.075,690,3.942,691,3.218,692,2.075,693,2.075,694,2.075,695,3.218,696,3.218,697,2.075,698,3.218,699,3.218,700,2.075,701,2.075,702,2.075,703,2.075,704,2.075,705,2.075,706,2.075,707,2.075,708,2.075,709,2.075,710,2.075,711,2.075]],["title/coverage.html",[712,3.373]],["body/coverage.html",[0,1.963,1,2.227,5,0.253,6,2.833,10,0.027,12,1.847,15,0.024,18,0.018,19,0.018,26,1.571,50,1.456,51,2.227,56,0.663,73,2.19,75,2.833,88,2.227,89,2.833,94,1.7,105,2.833,116,1.571,128,1.094,154,1.353,164,1.847,166,2.833,167,3.385,172,1.296,198,1.7,275,2.249,276,2.486,300,2.833,305,2.486,306,2.833,307,2.833,308,2.02,321,1.847,322,2.833,323,3.385,360,2.227,361,3.385,362,2.516,363,2.833,367,2.02,368,2.833,383,2.249,384,1.571,385,2.02,386,2.833,415,2.227,416,2.833,432,1.847,447,2.833,448,2.833,464,2.02,465,2.833,476,2.227,477,2.833,483,2.833,508,2.833,513,2.227,514,2.833,542,1.847,565,2.833,592,2.833,608,2.227,609,2.833,616,2.833,628,2.227,629,2.833,676,2.833,712,2.486,713,3.359,714,3.359,715,3.359,716,6.817,717,6.366,718,5.843,719,3.359,720,3.359,721,2.833,722,3.359,723,3.359,724,3.359,725,3.359,726,5.585,727,3.359,728,4.575,729,3.359]],["title/dependencies.html",[23,1.879,730,2.355]],["body/dependencies.html",[10,0.027,11,1.066,15,0.022,18,0.022,19,0.022,23,2.178,44,2.019,93,1.746,262,2.178,272,3.087,301,3.928,405,2.178,480,3.928,481,3.928,731,4.658,732,4.658,733,6.076,734,4.658,735,4.658,736,4.658,737,4.658,738,4.658,739,4.658,740,4.658,741,4.658,742,4.658,743,4.658,744,4.658,745,4.658,746,4.658,747,4.658,748,4.658]],["title/miscellaneous/enumerations.html",[749,1.851,750,3.389]],["body/miscellaneous/enumerations.html",[10,0.027,18,0.022,19,0.022,77,0.791,172,1.605,178,4.194,210,3.407,211,4.779,241,4.194,242,4.779,243,4.779,244,4.779,249,3.697,282,4.779,287,4.779,749,3.106,750,3.952,751,4.686,752,4.686,753,4.686,754,4.686]],["title/miscellaneous/functions.html",[749,1.851,755,3.389]],["body/miscellaneous/functions.html",[8,3.455,10,0.024,18,0.024,19,0.024,26,3.064,77,0.88,721,4.396,749,3.455,755,4.396,756,5.213]],["title/index.html",[77,0.471,364,2.355,757,2.793]],["body/index.html",[4,0.305,7,0.305,10,0.027,18,0.02,19,0.02,187,2.679,188,2.47,295,3.409,450,2.679,712,2.991,758,4.043,759,4.043,760,5.17,761,4.043,762,4.043,763,4.043,764,4.043,765,4.043,766,4.043,767,5.699,768,4.043,769,4.043,770,6.455,771,4.043,772,4.043,773,4.043,774,6.35,775,4.043,776,4.043,777,5.17,778,4.043,779,4.043,780,4.043,781,4.043,782,5.17,783,5.17,784,4.043,785,4.043,786,4.043,787,5.17,788,5.17,789,4.043,790,4.043,791,4.043,792,4.043,793,4.043,794,3.409,795,4.043,796,4.043,797,4.043,798,4.043,799,4.043,800,4.043,801,4.043,802,4.043,803,4.043,804,4.043,805,4.043,806,4.043,807,4.043,808,4.043,809,4.043,810,4.043,811,3.409]],["title/modules.html",[22,1.976]],["body/modules.html",[10,0.023,18,0.023,19,0.023,21,3.235,22,2.116,32,2.684,33,2.934,34,2.934,35,2.934,36,2.47,794,5.526,812,6.554,813,6.554,814,6.649,815,4.881,816,4.881]],["title/overview.html",[817,3.844]],["body/overview.html",[2,1.257,10,0.027,12,3.066,18,0.02,19,0.02,20,1.093,21,4.477,22,1.673,23,1.805,24,2.122,25,2.122,26,1.805,27,2.122,28,2.122,29,3.254,30,3.254,31,3.254,32,3.449,33,3.679,34,3.839,35,3.352,36,3.231,37,2.759,38,2.122,39,2.122,68,2.122,74,2.122,94,3.231,98,3.254,99,3.254,100,3.254,116,2.986,165,1.673,278,3.254,432,3.066,440,3.254,441,3.254,542,3.066,558,3.254,560,3.254,668,3.254,669,3.254,670,3.254,817,3.254,818,5.017,819,3.859,820,3.859]],["title/properties.html",[173,1.309,730,2.355]],["body/properties.html",[7,0.392,10,0.027,18,0.024,19,0.024,173,1.692,187,3.444,811,4.381,821,5.195,822,5.195,823,5.195]],["title/routes.html",[824,3.844]],["body/routes.html",[10,0.024,18,0.024,19,0.024,824,4.535]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":380,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["0.0.1",{"_index":822,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.25",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":373,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":492,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["11/12",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@apiquery({name",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@isint()@isnotempty",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isoptional()@type(undefined",{"_index":365,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1})@isnumber()@isnotempty",{"_index":471,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["2.0.5",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":421,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":319,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":318,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["3/3",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["40",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":819,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["5432",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":818,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":820,"title":{},"body":{"overview.html":{}}}],["8.12.0",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["91",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":617,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["already",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["alternative",{"_index":511,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["amazing",{"_index":795,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":430,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":431,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('meta",{"_index":437,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('posts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":611,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":772,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":766,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":21,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":12,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":88,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["authmodule",{"_index":32,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":94,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":816,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["await",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":796,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('login",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":463,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["blog",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":429,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":814,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":812,"title":{},"body":{"modules.html":{}}}],["building",{"_index":761,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":400,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["changeme",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["character",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":15,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":440,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":441,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":558,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":559,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":560,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":668,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":669,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":670,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":404,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["confirmation",{"_index":590,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":449,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["containing",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["content",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":436,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":610,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":712,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(createpostdto",{"_index":570,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":453,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["created",{"_index":422,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createdate",{"_index":593,"title":{},"body":{"entities/Tag.html":{}}}],["createdatecolumn",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{}}}],["createmetaoptions",{"_index":417,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createpostmetaoptionsdto",{"_index":418,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpost",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":164,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":198,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createtagdto",{"_index":305,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":321,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["credentials",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["defaultvaluepipe",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete()@apioperation({summary",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(@query('id",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(id",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleted",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":594,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":597,"title":{},"body":{"entities/Tag.html":{}}}],["deleteuser",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":773,"title":{},"body":{"index.html":{}}}],["directional",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["draft",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["dtos/create",{"_index":435,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":784,"title":{},"body":{"index.html":{}}}],["each",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":496,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["efficient",{"_index":762,"title":{},"body":{"index.html":{}}}],["eight",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/meta",{"_index":443,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entities/post.entity",{"_index":563,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/user.entity",{"_index":673,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":383,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":750,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["error",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["example",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":467,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@isoptional()@isboolean",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["featured",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetched",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":566,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(id",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":574,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone",{"_index":567,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone(id",{"_index":577,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["form",{"_index":576,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["founduser",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":760,"title":{},"body":{"index.html":{}}}],["function",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":755,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id?')@apioperation({summary",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid?')@apioperation({summary",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":364,"title":{"index.html":{}},"body":{"classes/GetUsersParamDto.html":{}}}],["getusers",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":360,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusersparamdto.id",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersquerydto",{"_index":367,"title":{"classes/GetUsersQueryDto.html":{}},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":815,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":791,"title":{},"body":{"index.html":{}}}],["handle",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["handling",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["hello",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":802,"title":{},"body":{"index.html":{}}}],["host",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["html",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["http",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional()@maxlength(1024",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isoptional()@maxlength(1024",{"_index":311,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":808,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://typeorm.io/decorator",{"_index":606,"title":{},"body":{"entities/Tag.html":{}}}],["id",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":461,"title":{},"body":{"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["image",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":77,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":73,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":456,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":458,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":769,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":771,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isauth(userid",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["isiso8601",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson()@isnotempty",{"_index":302,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isjson()@isoptional",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnumber",{"_index":474,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["isoptional()@isint()@type(undefined)@transform",{"_index":374,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["isstring",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isurl",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["john",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@example.com",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@example.com'})@isemail()@isnotempty()@maxlength(96",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":798,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{}}}],["json",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":805,"title":{},"body":{"index.html":{}}}],["key",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["last",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastname",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["legend",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":491,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":811,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":788,"title":{},"body":{"index.html":{}}}],["limit",{"_index":370,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["loading",{"_index":586,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["manages",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["manytoone",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":484,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["maximum",{"_index":376,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["maxlength",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":301,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"dependencies.html":{}}}],["metaoption",{"_index":384,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":457,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptions",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":495,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":415,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":33,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":452,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptionsservice",{"_index":432,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":455,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":749,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":787,"title":{},"body":{"index.html":{}}}],["mode",{"_index":777,"title":{},"body":{"index.html":{}}}],["module",{"_index":20,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":22,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":801,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":806,"title":{},"body":{"index.html":{}}}],["name",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["needs",{"_index":469,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":767,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":810,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["nestjs'})@isstring()@isnotempty()@minlength(3)@maxlength(256",{"_index":313,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":480,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":759,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":587,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(error",{"_index":591,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":770,"title":{},"body":{"index.html":{}}}],["null",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["nullable",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["ondelete",{"_index":399,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":789,"title":{},"body":{"index.html":{}}}],["option",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option'})@apiresponse({status",{"_index":420,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["option.entity",{"_index":444,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:18",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":401,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.controller",{"_index":445,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":416,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:30",{"_index":424,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":300,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:15",{"_index":303,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":442,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":434,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":448,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":451,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:30",{"_index":454,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/entities/meta",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":447,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":817,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":730,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pages",{"_index":371,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["param",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":363,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:17",{"_index":366,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":473,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":468,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":479,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password123",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123@'})@isstring()@isnotempty()@minlength(3)@maxlength(96)@matches(/^(?=.*[a",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patching",{"_index":478,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["patchpostdto",{"_index":464,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(id",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":476,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pattern",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["payload",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["per",{"_index":377,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["person",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":799,"title":{},"body":{"index.html":{}}}],["port",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":172,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(512",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post()@apioperation({summary",{"_index":419,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":475,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:121",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:134",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:150",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:175",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:180",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:20",{"_index":472,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:29",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:43",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.metaoptions",{"_index":398,"title":{},"body":{"entities/MetaOption.html":{}}}],["postgres",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["postmetaoptions",{"_index":426,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["postrepository",{"_index":568,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts'})@apiresponse({status",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.author",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":562,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/1",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":513,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":34,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":542,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":460,"title":{},"body":{"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["primarygeneratedcolumn",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":779,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":758,"title":{},"body":{"index.html":{}}}],["project",{"_index":790,"title":{},"body":{"index.html":{}}}],["promise",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":173,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":304,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["providers",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":433,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["published",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('limit",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":368,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":378,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:24",{"_index":375,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:33",{"_index":379,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:42",{"_index":381,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["querying",{"_index":369,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["r\\n",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":800,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reference",{"_index":607,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":512,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["relationship",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{}}}],["remove",{"_index":573,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":450,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":427,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["required",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":428,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["responsible",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["route",{"_index":425,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":824,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":774,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["sample_token",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":763,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":764,"title":{},"body":{"index.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["side",{"_index":765,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["single",{"_index":579,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":793,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":674,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:37",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":465,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":483,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:27",{"_index":494,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:30",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:33",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:36",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:44",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:47",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:50",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:53",{"_index":493,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:56",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:59",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:65",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:68",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:39",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:53",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:69",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":561,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":565,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:109",{"_index":572,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:17",{"_index":569,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:38",{"_index":571,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:54",{"_index":575,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:79",{"_index":578,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:99",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/create",{"_index":306,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts",{"_index":592,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:20",{"_index":601,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":602,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:26",{"_index":604,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":599,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:32",{"_index":603,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":600,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:38",{"_index":596,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":605,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":598,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":609,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.module.ts",{"_index":612,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":361,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":477,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["src/users/entities/user.entity.ts",{"_index":616,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":620,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":619,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":622,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":618,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":623,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":621,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["src/users/providers/users.service",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:16",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:36",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:66",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:98",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":671,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":775,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":778,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":780,"title":{},"body":{"index.html":{}}}],["started",{"_index":757,"title":{"index.html":{}},"body":{}}],["starter",{"_index":768,"title":{},"body":{"index.html":{}}}],["statements",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":803,"title":{},"body":{"index.html":{}}}],["story",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["successfully",{"_index":423,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":438,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":794,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":813,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":508,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":308,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":316,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.'})@isstring()@isoptional",{"_index":309,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts",{"_index":307,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:22",{"_index":314,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:38",{"_index":317,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":310,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:64",{"_index":315,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:78",{"_index":312,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":613,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags.controller",{"_index":614,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":608,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":35,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["take",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":783,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":786,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":785,"title":{},"body":{"index.html":{}}}],["tests",{"_index":782,"title":{},"body":{"index.html":{}}}],["text",{"_index":487,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":792,"title":{},"body":{"index.html":{}}}],["this.findonebyid(id",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionsrepository.create(createpostmetaoptionsdto",{"_index":459,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":462,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":439,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create(createpostdto",{"_index":583,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete(id",{"_index":589,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":585,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":588,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":584,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(id",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findandcount",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(id",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(user?.id",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["throw",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["todo",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["token",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":372,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["touch",{"_index":804,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["transform",{"_index":382,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["transformer",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@minlength(3",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":809,"title":{},"body":{"index.html":{}}}],["type",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":405,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":446,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":564,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":615,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":675,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":481,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":488,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["undefined})@isarray()@isoptional()@isstring({each",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["uni",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{}}}],["unique",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":781,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":823,"title":{},"body":{"properties.html":{}}}],["update",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":470,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":595,"title":{},"body":{"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":402,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{}}}],["updatepost",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["updating",{"_index":466,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["url",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["usefactory",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":128,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":482,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:31",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:94",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.isauth",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["userrepository",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":362,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":672,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.length",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.slice((page",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/users.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":628,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":36,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":116,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["valid",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validateuser",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":490,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":821,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":776,"title":{},"body":{"index.html":{}}}],["website",{"_index":807,"title":{},"body":{"index.html":{}}}],["without",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["world",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["you'd",{"_index":797,"title":{},"body":{"index.html":{}}}],["z0",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Controller for the application\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * Controller for the application\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Main module of the application\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\n\n/**\n * Main module of the application\n * @description Main module of the application\n * @module AppModule\n */\n@Module({\n  imports: [\n    AuthModule,\n    UsersModule,\n    PostsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: '$@admin@$',\n        database: 'nestjs-blog',\n        entities: ['dist/**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for application\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:12\n                        \n                    \n\n\n            \n                \n                        Get a hello message\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A hello message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service for application\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Get a hello message\n   * @returns {string} A hello message\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for auth\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { AuthService } from './providers/auth.service';\n\n/**\n * Controller for auth\n */\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling authentication\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                isAuth\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor of Auth service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\n\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service responsible for handling authentication\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructor of Auth service\n   * @description Injects UsersService\n   * @param usersService\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public async validateUser(username: string, password: string): Promise {\n    if (username === 'john' && password === 'changeme') {\n      return { id: 1, username: 'john' };\n    }\n    return null;\n  }\n\n  public async login(user: any) {\n    try {\n      const foundUser = this.usersService.findAll(user?.id);\n\n      return { data: foundUser, token: 'SAMPLE_TOKEN' };\n    } catch (error) {\n      throw new BadRequestException('Login credentials are incorrect');\n    }\n  }\n\n  public async isAuth(userId: number) {\n    try {\n      const user = await this.usersService.findOneById(userId);\n\n      if (!user) {\n        throw new NotFoundException('User not found');\n      }\n\n      const isAuth = user.isAuth;\n      return isAuth;\n    } catch (error) {\n      throw new BadRequestException('User not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of post author', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Content of the post', example: 'This is the content of the post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    Content of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for post', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:121\n                        \n                    \n\n            \n                \n                    Featured image for post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:175\n                        \n                    \n\n            \n                \n                    Meta options for the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of the post', enum: PostType, example: 'Possible values - 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:134\n                        \n                    \n\n            \n                \n                    Publish date of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize JSON object to avoid error', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:106\n                        \n                    \n\n            \n                \n                    Schema of the post\nExample :{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Person\"\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug of the post', example: 'my-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n            \n                \n                    Slug of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the post', enum: PostStatus, example: 'Possible values - 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:73\n                        \n                    \n\n            \n                \n                    Status of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string value', example: undefined})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:150\n                        \n                    \n\n            \n                \n                    Tags for the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Title of the post', example: 'New Post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:29\n                        \n                    \n\n            \n                \n                    Title of the post\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsArray, IsEnum, IsInt, IsString } from 'class-validator';\nimport { IsUrl, IsISO8601, IsJSON } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\nimport { ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { PostType } from '../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from 'src/meta-options/dtos/create-post-meta-options.dto';\n\n/**\n * Data transfer object (DTO) for creating a post.\n */\nexport class CreatePostDto {\n  /**\n   * Title of the post\n   * @description Title of the post\n   * @example New Post\n   * @minLength 4\n   * @maxLength 512\n   */\n  @ApiProperty({ description: 'Title of the post', example: 'New Post' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(512)\n  readonly title: string;\n\n  /**\n   * Type of the post\n   * @description Type of the post\n   * @example Possible values - 'post', 'page', 'story', 'series'\n   */\n  @ApiProperty({\n    description: 'Type of the post',\n    enum: PostType,\n    example: \"Possible values - 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  readonly postType: PostType;\n\n  /**\n   * Slug of the post\n   * @description Slug of the post\n   * @example my-post\n   * @pattern ^[a-z0-9]+(?:-[a-z0-9]+)*$\n   */\n  @ApiProperty({ description: 'Slug of the post', example: 'my-post' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  readonly slug: string;\n\n  /**\n   * Status of the post\n   * @description Status of the post\n   * @example Possible values - 'draft', 'scheduled', 'review', 'published'\n   */\n  @ApiProperty({\n    description: 'Status of the post',\n    enum: PostStatus,\n    example: \"Possible values - 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  readonly status: PostStatus;\n\n  /**\n   * Content of the post\n   * @description Content of the post\n   * @example This is the content of the post.\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'Content of the post',\n    example: 'This is the content of the post.',\n  })\n  @IsString()\n  @IsOptional()\n  readonly content?: string;\n\n  /**\n   * Schema of the post\n   * @description Schema of the post\n   * @example\n   * {\n   *   \"@context\": \"https://schema.org\",\n   *   \"@type\": \"Person\"\n   * }\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'Serialize JSON object to avoid error',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsJSON()\n  @IsOptional()\n  readonly schema?: string;\n\n  /**\n   * Featured image for post\n   * @description Featured image for post\n   * @example http://localhost.com/images/image1.jpg\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'Featured image for post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  readonly featuredImageURL?: string;\n\n  /**\n   * Publish date of the post\n   * @description Publish date of the post\n   * @example 2024-03-16T07:46:32+0000\n   */\n  @ApiPropertyOptional({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  readonly publishOn?: Date;\n\n  /**\n   * Tags for the post\n   * @description Tags for the post\n   * @example ['nestjs', 'typescript']\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string value',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  readonly tags?: string[];\n\n  /**\n   * Meta options for the post\n   * @description Meta options for the post\n   * @example { \"key\": \"sidebarEnabled\", \"value\": true }\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'a JSON string',\n          example: '{ \"sidebarEnabled\": true }',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  readonly metaOptions?: CreatePostMetaOptionsDto | null;\n\n  @ApiProperty({ description: 'ID of post author', example: 1 })\n  @IsInt()\n  @IsNotEmpty()\n  readonly authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) with metadata options for creating a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:15\n                        \n                    \n\n            \n                \n                    Metadata value\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsJSON } from 'class-validator';\n\n/**\n * Data transfer object (DTO) with metadata options for creating a post.\n * @description Data transfer object (DTO) with metadata options for creating a post.\n * @property {JSON} metaValue - Metadata value\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * Metadata value\n   * @example { \"key\": \"value\" }\n   */\n  @IsJSON()\n  @IsNotEmpty()\n  readonly metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Description of tag', example: 'This is a tag.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:51\n                        \n                    \n\n            \n                \n                    Description of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image URL of tag', example: 'https://example.com/image.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:78\n                        \n                    \n\n            \n                \n                    Featured image URL of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of tag', example: 'nestjs'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:22\n                        \n                    \n\n            \n                \n                    Name of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Schema of tag', example: '{ \"key\": \"value\" }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:64\n                        \n                    \n\n            \n                \n                    Schema of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug of tag', example: 'my-tag'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:38\n                        \n                    \n\n            \n                \n                    Slug of tag\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsJSON, IsString, IsUrl } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data transfer object (DTO) for creating a tag.\n */\nexport class CreateTagDto {\n  /**\n   * Name of tag\n   * @description Name of tag\n   * @example nestjs\n   * @minLength 3\n   * @maxLength 256\n   */\n  @ApiProperty({ description: 'Name of tag', example: 'nestjs' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(256)\n  readonly name: string;\n\n  /**\n   * Slug of tag\n   * @description Slug of tag\n   * @example my-tag\n   * @pattern ^[a-z0-9]+(?:-[a-z0-9]+)*$\n   */\n  @ApiProperty({ description: 'Slug of tag', example: 'my-tag' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * Description of tag\n   * @description Description of tag\n   * @example This is a tag.\n   */\n  @ApiPropertyOptional({\n    description: 'Description of tag',\n    example: 'This is a tag.',\n  })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Schema of tag\n   * @description Schema of tag\n   * @example { \"key\": \"value\" }\n   */\n  @ApiPropertyOptional({\n    description: 'Schema of tag',\n    example: '{ \"key\": \"value\" }',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  /**\n   * Featured image URL of tag\n   * @description Featured image URL of tag\n   * @example https://example.com/image.jpg\n   */\n  @ApiPropertyOptional({\n    description: 'Featured image URL of tag',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  featuredImageURL?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating a new user\nExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isAuth\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    User first name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isAuth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User authentication status', example: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:94\n                        \n                    \n\n            \n                \n                    User authentication status\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name', example: 'Doe'})@IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    User last name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:78\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsEmail, IsBoolean } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data transfer object for creating a new user\n * @description Data transfer object for creating a new user\n * @class CreateUserDto\n * @export CreateUserDto\n * @example { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'Password123@', isAuth: false }\n * @property {string} firstName - User first name\n * @property {string} lastName - User last name\n * @property {string} email - User email\n * @property {string} password - User password\n * @property {boolean} isAuth - User authentication status\n */\nexport class CreateUserDto {\n  /**\n   * User first name\n   * @description User first name\n   * @type {string}\n   * @example John\n   * @required true\n   */\n  @ApiProperty({ description: 'User first name', example: 'John' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly firstName: string;\n\n  /**\n   * User last name\n   * @description User last name\n   * @type {string}\n   * @example Doe\n   * @default null\n   * @optional true\n   */\n  @ApiPropertyOptional({ description: 'User last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * User email\n   * @description User email\n   * @type {string}\n   * @example johndoe@example.com\n   * @required true\n   * @unique true\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User password\n   * @description User password\n   * @type {string}\n   * @example password123@\n   * @required true\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n\n  /**\n   * User authentication status\n   * @description User authentication status\n   * @type {boolean}\n   * @example false\n   * @default false\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'User authentication status',\n    example: false,\n  })\n  @IsOptional()\n  @IsBoolean()\n  isAuth?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 1})@IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:17\n                        \n                    \n\n            \n                \n                    User ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO for getting users\n */\nexport class GetUsersParamDto {\n  /**\n   * User ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'User ID', example: 1 })\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  readonly id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersQueryDto.html":{"url":"classes/GetUsersQueryDto.html","title":"class - GetUsersQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for querying users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                pages\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:24\n                        \n                    \n\n            \n                \n                    The maximum number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:15\n                        \n                    \n\n            \n                \n                    The page number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:33\n                        \n                    \n\n            \n                \n                    The total number of pages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:42\n                        \n                    \n\n            \n                \n                    The total number of items.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\n\n/**\n * DTO for querying users.\n */\nexport class GetUsersQueryDto {\n  /**\n   * The page number.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 1)\n  page?: number = 1;\n\n  /**\n   * The maximum number of items per page.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 10)\n  limit?: number = 10;\n\n  /**\n   * The total number of pages.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 1)\n  pages?: number = 1;\n\n  /**\n   * The total number of items.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 0)\n  total?: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entities/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Meta Option Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToOne, JoinColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nimport { Post } from 'src/posts/entities/post.entity';\n\n/**\n * Meta Option Entity\n * @description Meta Option Entity\n * @property {number} id - Meta Option ID\n * @property {string} metaValue - Meta Option value\n * @property {Date} createdDate - Meta Option create date\n * @property {Date} updatedDate - Meta Option update date\n */\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'json', nullable: false })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, { onDelete: 'CASCADE' })\n  @JoinColumn() // For uni-directional relationship\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for meta-options\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new meta-option'})@ApiResponse({status: 201, description: 'Meta-Option created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Route for handling create postMetaOptions requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body } from '@nestjs/common';\nimport { Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\n\n/**\n * Controller for meta-options\n * @description Controller for meta-options\n * @module MetaOptionsController\n */\n@Controller('meta-options')\n@ApiTags('Meta-Options')\nexport class MetaOptionsController {\n  /**\n   * Constructor for meta-options controller\n   * @param {MetaOptionsService} metaOptionsService\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Route for handling create postMetaOptions requests\n   * @param createPostMetaOptionsDto\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new meta-option' })\n  @ApiResponse({ status: 201, description: 'Meta-Option created successfully' })\n  public createMetaOptions(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for meta-options\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { MetaOption } from './entities/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for meta-options\n * @description Module for meta-options\n * @module MetaOptionsModule\n */\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for meta-options\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for meta-options service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to create a new meta option\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Create\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { MetaOption } from '../entities/meta-option.entity';\n\n/**\n * Service for meta-options\n * @description Service for meta-options\n * @module MetaOptionsService\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Constructor for meta-options service\n   * @description Injects MetaOptionRepository\n   * @param metaOptionsRepository\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n  /**\n   * The method to create a new meta option\n   * @param createPostMetaOptionsDto\n   * @returns Create\n   */\n  public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    try {\n      const metaOption = this.metaOptionsRepository.create(createPostMetaOptionsDto); // prettier-ignore\n      return await this.metaOptionsRepository.save(metaOption);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for updating a post.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of post that needs to be updated', example: 1})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:20\n                        \n                    \n\n            \n                \n                    ID of post that needs to be updated\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * Data transfer object (DTO) for updating a post.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * ID of post that needs to be updated\n   * @example 1\n   */\n  @ApiProperty({\n    description: 'ID of post that needs to be updated',\n    example: 1,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for patching user\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for patching user\n * @description DTO for patching user\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Post Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                featuredImageURL\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-array', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToOne, ManyToOne } from 'typeorm';\n\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { PostType } from '../enums/postType.enum';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\nimport { User } from 'src/users/entities/user.entity';\n\n/**\n * Post Entity\n * @description Schema for Post Table in Database\n * @property {number} id - Post ID\n * @property {string} title - Post title\n * @property {PostType} postType - Post type\n * @property {string} slug - Post slug\n * @property {PostStatus} status - Post status\n * @property {string} content - Post content\n * @property {string} schema - Post schema\n * @property {string} featuredImageURL - Post featured image URL\n * @property {Date} publishOn - Post publish date\n * @property {string[]} tags - Post tags\n * @property {CreatePostMetaOptionsDto[]} metaOptions - Post meta options\n */\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  @Column({ type: 'enum', enum: PostType, nullable: false, default: PostType.POST }) // prettier-ignore\n  postType: PostType;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    nullable: false,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  content?: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  schema?: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true, default: null })\n  featuredImageURL: string;\n\n  @Column({ type: 'timestamp', nullable: true, default: null })\n  publishOn?: Date;\n\n  @Column({ type: 'simple-array', nullable: true, default: null })\n  tags?: string[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  }) // ALTERNATIVE: to relations in service\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller responsible for handling posts data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'Post created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Route for handling create post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ApiOperation({summary: 'Delete a post'})@ApiResponse({status: 200, description: 'Post deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Route for handling delete post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId?')@ApiOperation({summary: 'Get all user posts'})@ApiResponse({status: 200, description: 'Post fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Route for handling get posts request\nExample :```html\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: number, patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a post'})@ApiResponse({status: 200, description: 'Post updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Route for handling update post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Param, Query, ParseIntPipe } from '@nestjs/common';\nimport { Get, Patch, Post, Delete } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { PostsService } from './providers/posts.service';\n\n/**\n * Controller responsible for handling posts data\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Route for handling get posts request\n   * @example HTTP GET /posts\n   * @example HTTP GET /posts/1\n   * @returns response\n   */\n  @Get(':userId?')\n  @ApiOperation({ summary: 'Get all user posts' })\n  @ApiResponse({ status: 200, description: 'Post fetched successfully' })\n  public getPosts(@Param('userId') userId: number) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Route for handling create post request\n   * @param createPostDto\n   * @example HTTP POST /posts\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Route for handling update post request\n   * @param id\n   * @param patchPostDto\n   * @example HTTP PATCH /posts/1\n   * @returns response\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a post' })\n  @ApiResponse({ status: 200, description: 'Post updated successfully' })\n  public updatePost(\n    @Param('id') id: number,\n    @Body() patchPostDto: PatchPostDto,\n  ) {\n    return this.postsService.update(id, patchPostDto);\n  }\n\n  /**\n   * Route for handling delete post request\n   * @param id\n   * @example HTTP DELETE /posts/1\n   * @returns response\n   */\n  @Delete()\n  @ApiOperation({ summary: 'Delete a post' })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for posts\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { PostsController } from './posts.controller';\nimport { Post } from './entities/post.entity';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from '../users/users.module';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\n\n/**\n * Module for posts\n * @description Module for posts\n * @module PostsModule\n */\n@Module({\n  imports: [UsersModule, TypeOrmModule.forFeature([Post, MetaOption])],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling posts data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postRepository: Repository, metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of Posts service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:38\n                        \n                    \n\n\n            \n                \n                        The method to create a new post in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:109\n                        \n                    \n\n\n            \n                \n                        The method to remove a post from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:54\n                        \n                    \n\n\n            \n                \n                        The method to get all posts form the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:79\n                        \n                    \n\n\n            \n                \n                        The method to get a single post by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:99\n                        \n                    \n\n\n            \n                \n                        The method to update a post in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                any\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Post } from '../entities/post.entity';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\n\n/**\n * Service responsible for handling posts data\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor of Posts service\n   * @description Injects UsersService, PostRepository and MetaOptionRepository\n   * @param usersService\n   * @param postRepository\n   * @param metaOptionRepository\n   */\n  constructor(\n    private readonly usersService: UsersService,\n    @InjectRepository(Post)\n    private readonly postRepository: Repository,\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new post in the database\n   * @param createPostDto\n   * @returns Post\n   */\n  public async create(createPostDto: CreatePostDto) {\n    try {\n      // Create post\n      const post = this.postRepository.create(createPostDto);\n\n      // Return post\n      return await this.postRepository.save(post);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get all posts form the database\n   * @returns Post[]\n   */\n  public async findAll(userId: number) {\n    try {\n      if (userId) {\n        // const user = await this.usersService.findOneById(userId);\n      }\n\n      const posts = await this.postRepository.find({\n        relations: { metaOptions: true }, // ALTERNATIVE: to eager loading in entity\n      });\n\n      if (!posts) {\n        throw new NotFoundException('No posts found');\n      }\n\n      return posts;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get a single post by ID\n   * @param id\n   * @returns Post\n   */\n  public async findOne(id: number) {\n    try {\n      const post = await this.postRepository.findOne({ where: { id } });\n\n      if (!post) {\n        throw new NotFoundException('No post found');\n      }\n\n      return post;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to update a post in the database\n   * @param id\n   * @param patchPostDto\n   * @returns any\n   */\n  public async update(id: number, patchPostDto: PatchPostDto) {\n    const data = { id, ...patchPostDto };\n    return data;\n  }\n\n  /**\n   * The method to remove a post from the database\n   * @param id\n   * @returns string\n   */\n  public async delete(id: number) {\n    try {\n      // Delete the post\n      await this.postRepository.delete(id);\n\n      // Return confirmation message\n      return { deleted: true, id };\n    } catch (error) {\n      throw new NotFoundException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * Tag Entity\n * @description Tag Entity\n * @property {number} id - Tag ID\n * @property {string} name - Tag name\n * @property {string} slug - Tag slug\n * @property {string} description - Tag description\n * @property {string} schema - Tag schema\n * @property {string} featuredImageURL - Tag featured image URL\n * @property {Date} createDate - Tag create date\n * @property {Date} updateDate - Tag update date\n * @property {Date} deletedAt - Tag delete date\n */\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  name: string;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  description?: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  schema?: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true, default: null })\n  featuredImageURL?: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n\n  //   https://typeorm.io/decorator-reference\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for tags\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Controller for tags\n */\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for tags\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Tag } from './tag.entity';\nimport { TagsController } from './tags.controller';\n\n/**\n * Module for tags\n * @description Module for tags\n * @module TagsModule\n */\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                isAuth\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isAuth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToMany } from 'typeorm';\n\nimport { Post } from 'src/posts/entities/post.entity';\n\n/**\n * User Entity\n * @description User Entity\n * @column id: User ID {number}\n * @column firstName: User first name {string}\n * @column lastName: User last name {string}\n * @column email: User email {string}\n * @column password: User password {string}\n * @column isAuth: User authentication status {boolean}\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly firstName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  lastName?: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  readonly email: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  password: string;\n\n  @Column({ type: 'boolean', nullable: false, default: false })\n  isAuth: boolean;\n\n  @OneToMany(() => Post, (posts) => posts.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller responsible for handling users data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Route for handling create user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a user'})@ApiResponse({status: 200, description: 'User deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Route for handling delete user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, getUsersQueryDto: GetUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id?')@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number', example: 1})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Limit', example: 10})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Route for handling get users request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                getUsersQueryDto\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(id: number, patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user'})@ApiResponse({status: 200, description: 'User updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        Route for handling patch user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n// import { DefaultValuePipe, ParseIntPipe } from '@nestjs/common';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { GetUsersQueryDto } from './dtos/get-users-query.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\n\n/**\n * Controller responsible for handling users data\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Route for handling get users request\n   * @param getUsersParamDto\n   * @param page\n   * @param limit\n   * @example HTTP GET /users\n   * @returns response\n   */\n  @Get(':id?')\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully' })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n    example: 1,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Limit',\n    example: 10,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query() getUsersQueryDto: GetUsersQueryDto,\n    // @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    // @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n  ) {\n    const id = getUsersParamDto.id;\n    const response = this.usersService.findAll(id, getUsersQueryDto);\n    return response;\n  }\n\n  /**\n   * Route for handling create user request\n   * @example HTTP POST /user\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Route for handling patch user request\n   * @param id\n   * @param patchUserDto\n   * @example HTTP PATCH /user\n   * @returns response\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  public patchUser(\n    @Param('id') id: number,\n    @Body() patchUserDto: PatchUserDto,\n  ) {\n    return patchUserDto;\n  }\n\n  /**\n   * Route for handling delete user request\n   * @param payload\n   * @example HTTP DELETE /user\n   * @returns response\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  public deleteUser(@Param('id') id: number, @Body() payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for users\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n/**\n * Module for users\n * @description Module for users\n * @module UsersModule\n */\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that manages users data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor of User service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:36\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                newUser\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(id?: number, query?: GetUsersQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:66\n                        \n                    \n\n\n            \n                \n                        The method to get all users form the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                an object containing data and message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:98\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                an empty array or an array of found user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { GetUsersQueryDto } from '../dtos/get-users-query.dto';\nimport { User } from '../entities/user.entity';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Service that manages users data.\n * @description Service that manages users data.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor of User service\n   * @description Injects AuthService and UserRepository\n   * @param authService\n   * @param userRepository\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   * @description The method to create a new user in the database\n   * @param createUserDto\n   * @returns newUser\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    try {\n      // Check if user already exists with same email\n      const existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n\n      // TODO: Handle exception\n      if (existingUser) {\n        throw new BadRequestException('User already exists');\n      }\n\n      // Create User\n      let newUser = this.userRepository.create(createUserDto);\n      newUser = await this.userRepository.save(newUser);\n\n      return newUser;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get all users form the database\n   * @description The method to get all users form the database\n   * @param id\n   * @param page\n   * @param limit\n   * @returns an object containing data and message\n   */\n  public async findAll(id?: number, query?: GetUsersQueryDto) {\n    const { page, limit } = query;\n\n    try {\n      if (id) {\n        const response = await this.findOneById(id);\n        return response;\n      }\n\n      const [users] = await this.userRepository.findAndCount({\n        skip: (page - 1) * limit,\n        take: limit,\n      });\n\n      if (!users.length) {\n        throw new NotFoundException('No users found');\n      }\n\n      const data = users.slice((page - 1) * limit, page * limit);\n\n      return data;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @description The method to find a single user by ID\n   * @param id\n   * @returns an empty array or an array of found user\n   */\n  public async findOneById(id: number) {\n    try {\n      const user = await this.userRepository.findOne({ where: { id } });\n\n      if (!user) {\n        throw new NotFoundException('No user found');\n      }\n\n      return user;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/entities/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/tags/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersQueryDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap the application\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
