var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.144,1,2.274]],["body/controllers/AppController.html",[0,2.185,1,3.928,2,1.657,3,0.441,4,0.393,5,0.393,6,4.172,7,0.393,8,3.928,9,0.526,10,0.026,11,1.108,12,3.498,13,4.172,14,0.441,15,0.018,16,2.747,17,1.108,18,0.022,19,0.022]],["title/modules/AppModule.html",[20,1.001,21,2.274]],["body/modules/AppModule.html",[1,3.437,2,1.507,3,0.29,4,0.259,5,0.259,7,0.358,8,3.437,9,0.594,10,0.026,11,0.729,12,3.357,13,2.744,14,0.29,15,0.012,18,0.017,19,0.017,20,1.817,21,4.53,22,1.434,23,1.434,24,1.666,25,1.666,26,1.434,27,2.642,28,1.666,29,2.744,30,2.744,31,2.744,32,3.357,33,3.661,34,3.661,35,3.357,36,3.096,37,2.305,38,1.666,39,1.666,40,2.414,41,5.146,42,2.865,43,1.97,44,1.336,45,3.795,46,5.552,47,2.167,48,3.245,49,3.245,50,3.245,51,3.245,52,3.245,53,1.434,54,2.167,55,3.245,56,4.488,57,3.245,58,4.488,59,3.245,60,3.339,61,3.245,62,1.666,63,3.828,64,2.744,65,3.245,66,3.245,67,1.543,68,3.245,69,3.245,70,3.245,71,3.245,72,3.245,73,2.414,74,3.245,75,1.806,76,3.245,77,0.589,78,3.245,79,3.245,80,3.245,81,3.245,82,3.245,83,2.744,84,3.245,85,2.167,86,3.245,87,1.97,88,3.245,89,3.245,90,3.245,91,3.245,92,3.245]],["title/injectables/AppService.html",[12,1.896,93,1.144]],["body/injectables/AppService.html",[3,0.415,4,0.37,5,0.37,7,0.37,8,3.785,9,0.415,10,0.026,11,1.042,12,3.155,14,0.415,15,0.017,18,0.021,19,0.021,93,1.903,94,2.382,95,3.923,96,2.91,97,0.666,98,2.333,99,6.372,100,0.905,101,4.639,102,6.534,103,3.547,104,2.333,105,2.351,106,1.91,107,4.639]],["title/controllers/AuthController.html",[0,1.144,108,2.274]],["body/controllers/AuthController.html",[0,2.089,2,1.619,3,0.431,4,0.384,5,0.384,7,0.384,9,0.556,10,0.026,11,1.083,14,0.431,15,0.018,16,2.685,17,1.083,18,0.022,19,0.022,108,3.875,109,4.078,110,2.929,111,5.261,112,2.929,113,1.853,114,3.195,115,4.078,116,4.823,117,4.823]],["title/modules/AuthModule.html",[20,1.001,32,1.896]],["body/modules/AuthModule.html",[2,1.842,3,0.393,4,0.351,5,0.351,9,0.559,10,0.026,11,0.988,14,0.393,15,0.016,18,0.02,19,0.02,20,1.757,22,1.945,23,1.945,24,2.259,25,2.259,26,1.945,27,3.068,28,3.068,32,3.706,36,2.816,37,2.816,38,2.259,39,2.259,42,2.45,108,3.991,114,3.544,115,3.72,118,3.72,119,3.72,120,3.72,121,4.4,122,3.663,123,4.4,124,3.72]],["title/injectables/AuthService.html",[93,1.144,114,1.749]],["body/injectables/AuthService.html",[3,0.28,4,0.249,5,0.249,7,0.348,9,0.451,10,0.026,11,0.982,14,0.28,15,0.012,17,0.702,18,0.016,19,0.016,62,2.59,73,2.325,77,0.991,83,4.265,85,3.649,93,1.469,94,1.605,96,2.805,97,0.449,98,1.801,100,1.066,104,2.077,105,2.29,106,2.25,111,3.698,114,2.246,122,2.088,125,2.643,126,2.435,127,2.656,128,3.253,129,2.803,130,3.531,131,4.064,132,4.373,133,4.373,134,3.042,135,2.643,136,3.017,137,3.126,138,2.415,139,1.835,140,1.406,141,4.373,142,1.388,143,3.126,144,2.325,145,2.435,146,4.373,147,3.126,148,1.811,149,4.373,150,3.126,151,4.373,152,1.898,153,2.088,154,2.643,155,1.898,156,1.382,157,2.643,158,1.898,159,3.698,160,3.126,161,0.982,162,1.605,163,1.74,164,2.656,165,4.373,166,3.126,167,1.382,168,3.126,169,3.126,170,2.656,171,2.435,172,3.063,173,1.811,174,3.126,175,3.126,176,3.126,177,1.898,178,2.643,179,3.126,180,2.921,181,3.126,182,2.643]],["title/classes/CreatePostDto.html",[15,0.013,183,1.896]],["body/classes/CreatePostDto.html",[3,0.13,4,0.116,5,0.116,7,0.491,9,0.477,10,0.026,14,0.13,15,0.017,17,1.458,18,0.009,19,0.009,53,1.607,67,2.884,77,1.177,97,0.209,100,1.041,103,1.349,105,2.263,113,0.558,140,1.516,142,1,161,0.761,162,1.867,163,1.349,167,1.071,171,1.349,173,1.119,183,1.349,184,0.642,185,4.613,186,1.081,187,1.471,188,2.577,189,1.244,190,1.618,191,1.501,192,0.979,193,2.634,194,4.258,195,2.081,196,2.318,197,3.607,198,2.634,199,2.914,200,3.238,201,2.075,202,2.429,203,3.416,204,1.569,205,4.04,206,2.423,207,4.112,208,2.752,209,1.453,210,1.453,211,1.471,212,4.363,213,2.801,214,1.453,215,1.453,216,2.428,217,2.698,218,2.698,219,1.453,220,1.453,221,1.867,222,2.049,223,1.453,224,1.453,225,1.453,226,1.735,227,4.1,228,4.363,229,4.363,230,1.892,231,2.634,232,2.634,233,1.453,234,1.453,235,3.091,236,2.423,237,2.049,238,2.423,239,3.116,240,3.116,241,1.453,242,1.453,243,2.634,244,3.246,245,2.423,246,2.423,247,3.635,248,3.116,249,3.116,250,1.229,251,1.453,252,1.453,253,3.689,254,3.689,255,2.049,256,2.049,257,2.049,258,2.049,259,2.049,260,1.453,261,3.005,262,3.074,263,2.634,264,2.634,265,2.634,266,1.453,267,1.453,268,3.074,269,1.071,270,2.423,271,1.453,272,1.453,273,1.453,274,1.453,275,2.914,276,3.091,277,2.423,278,1.453,279,2.318,280,2.704,281,1.921,282,2.049,283,2.423,284,1.802,285,2.65,286,2.81,287,1.081,288,1.802,289,1.802,290,2.423,291,0.971,292,1.229,293,1.229,294,0.598,295,1.081,296,1.081,297,1.349,298,1.081,299,1.081,300,1.229,301,1.229,302,1.453,303,1.453,304,1.453,305,1.229,306,1.229,307,1.229,308,1.453,309,1.453,310,1.453,311,1.453,312,2.423,313,1.229,314,2.423,315,2.423,316,2.423,317,1.081,318,2.423,319,0.746,320,1.081]],["title/classes/CreatePostMetaOptionsDto.html",[15,0.013,221,1.749]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.374,4,0.333,5,0.333,7,0.423,9,0.374,10,0.026,14,0.374,15,0.02,17,1.312,18,0.02,19,0.02,53,2.349,77,0.759,97,0.601,100,0.816,105,2.042,167,2.581,184,1.849,187,3.545,188,3.251,189,2.998,190,3.9,191,1.424,192,1.669,204,1.23,208,2.188,221,2.728,226,3.251,244,3.112,281,1.99,284,3.952,285,3.226,294,2.188,295,3.952,317,3.112,319,3.154,320,4.569,321,3.538,322,5.479,323,4.184,324,4.184,325,2.541]],["title/classes/CreateTagDto.html",[15,0.013,297,1.896]],["body/classes/CreateTagDto.html",[3,0.232,4,0.207,5,0.207,7,0.53,9,0.448,10,0.026,14,0.232,15,0.019,17,1.021,18,0.014,19,0.014,77,0.97,97,0.372,100,1.043,103,2.129,105,2.369,113,0.997,139,1.994,140,1.44,167,1.69,184,1.146,187,2.322,188,2.129,189,1.964,190,2.554,192,1.202,195,3.034,199,3.966,200,4.117,204,1.572,208,2.769,216,3.864,217,3.571,218,3.571,250,2.193,253,4.73,254,4.73,255,3.234,256,3.234,257,3.234,258,3.234,259,3.234,269,3.04,275,3.034,276,3.349,280,3.73,281,2.161,282,3.234,284,2.845,285,2.759,286,3.045,287,1.929,288,2.845,289,2.845,297,2.129,298,4.161,305,2.193,306,3.234,307,2.193,313,2.193,317,3.379,319,2.333,326,2.193,327,3.379,328,2.593,329,2.593,330,2.593,331,2.593,332,2.845,333,2.593,334,2.593,335,2.593,336,2.593,337,2.593,338,3.824,339,2.593,340,1.929,341,2.193,342,3.824]],["title/classes/CreateUserDto.html",[15,0.013,343,1.896]],["body/classes/CreateUserDto.html",[3,0.204,4,0.182,5,0.182,7,0.49,9,0.421,10,0.026,14,0.311,15,0.019,17,1.198,18,0.013,19,0.013,67,2.536,77,1.083,85,4.054,97,0.327,100,0.988,103,1.934,105,2.46,113,0.877,128,3.966,131,3.765,139,2.067,140,1.372,142,0.956,148,2.451,159,3.557,163,1.27,167,1.859,173,1.51,184,1.008,187,2.554,188,2.342,190,2.81,192,1.091,201,2.536,204,1.488,207,2.81,208,2.725,213,2.415,275,3.141,276,2.81,280,3.498,281,2.001,285,2.856,286,2.554,287,1.697,288,1.697,289,1.697,325,3.073,327,2.584,332,3.129,341,3.557,343,2.618,344,4.508,345,1.697,346,4.515,347,4.279,348,4.279,349,2.281,350,2.281,351,4.508,352,2.281,353,2.281,354,3.977,355,2.281,356,2.281,357,4.508,358,2.281,359,2.281,360,2.281,361,4.703,362,3.474,363,3.474,364,3.474,365,3.474,366,3.474,367,5.332,368,3.474,369,3.474,370,3.474,371,2.281,372,3.474,373,3.474,374,4.207,375,2.281,376,4.207,377,4.703,378,1.934,379,3.474,380,1.524,381,2.281]],["title/classes/GetUsersParamDto.html",[15,0.013,382,2.274]],["body/classes/GetUsersParamDto.html",[3,0.38,4,0.338,5,0.338,7,0.427,9,0.526,10,0.026,14,0.38,15,0.022,17,1.321,18,0.02,19,0.02,77,1.066,97,0.61,100,0.829,113,1.632,140,1.38,142,1.618,148,2.217,161,2.075,162,2.754,184,1.877,189,2.754,192,1.685,204,1.249,208,2.543,276,3.582,279,3.99,281,2.02,286,3.257,291,2.836,327,3.159,382,3.582,383,3.99,384,3.438,385,3.591,386,4.535,387,4.246,388,4.246]],["title/classes/GetUsersQueryDto.html",[15,0.013,389,2.068]],["body/classes/GetUsersQueryDto.html",[3,0.286,4,0.255,5,0.255,7,0.255,9,0.398,10,0.026,14,0.286,15,0.019,18,0.016,19,0.016,77,1.157,97,0.46,100,1.077,140,1.616,142,1.883,162,3.083,184,1.415,189,2.284,192,1.397,204,1.623,222,4.668,230,3.739,279,4.315,281,1.523,286,3.523,291,2.139,319,3.379,378,3.074,383,4.315,384,3.428,389,2.701,390,2.708,391,4.447,392,3.801,393,5.801,394,6.158,395,4.321,396,5.521,397,3.202,398,4.447,399,4.447,400,3.202,401,3.202,402,4.321,403,3.202,404,5.801]],["title/entities/MetaOption.html",[405,1.402,406,1.62]],["body/entities/MetaOption.html",[3,0.306,4,0.273,5,0.273,7,0.371,9,0.508,10,0.026,14,0.306,15,0.013,18,0.017,19,0.017,53,2.771,75,1.904,77,1.111,97,0.491,100,1.159,105,2.033,142,1.455,161,1.866,191,1.453,192,1.462,204,1.746,213,2.39,235,4.26,244,3.462,294,2.523,319,1.756,320,4.223,325,3.447,405,2.445,406,2.214,407,3.72,408,2.892,409,4.663,410,5.677,411,5.677,412,4.473,413,3.42,414,3.533,415,3.42,416,2.284,417,3.108,418,3.42,419,2.892,420,4.654,421,3.935,422,3.42,423,3.42,424,4.473,425,3.42,426,3.108,427,2.338,428,3.935,429,4.654,430,2.284,431,1.228,432,2.077,433,2.544,434,3.42,435,3.42,436,3.42]],["title/controllers/MetaOptionsController.html",[0,1.144,437,2.274]],["body/controllers/MetaOptionsController.html",[0,2.022,2,1.197,3,0.319,4,0.284,5,0.284,7,0.46,9,0.539,10,0.026,11,1.075,14,0.319,15,0.013,16,1.984,17,0.8,18,0.018,19,0.018,20,1.048,53,2.913,54,3.195,77,0.646,97,0.512,98,1.97,100,0.695,104,1.97,106,1.467,110,2.164,112,2.164,113,1.369,127,2.905,129,2.387,134,1.984,138,1.575,139,1.197,140,0.917,156,2.115,173,1.718,191,1.213,201,1.695,204,1.048,221,3.253,226,3.527,294,1.97,296,2.651,409,4.018,431,2.073,437,3.607,438,3.013,439,5.401,440,3.563,441,2.38,442,3.563,443,3.195,444,3.195,445,3.195,446,3.563,447,3.195,448,4.784,449,4.784,450,2.664,451,3.195,452,3.195,453,3.195,454,3.353,455,3.013,456,3.013,457,1.695,458,3.563,459,3.563,460,2.38,461,3.563]],["title/modules/MetaOptionsModule.html",[20,1.001,33,2.068]],["body/modules/MetaOptionsModule.html",[2,1.801,3,0.38,4,0.338,5,0.338,7,0.427,9,0.57,10,0.026,11,0.954,14,0.38,15,0.016,18,0.02,19,0.02,20,1.942,22,1.877,23,1.877,24,2.18,25,2.18,26,1.877,27,3.019,28,2.18,33,4.01,37,2.754,38,2.18,39,2.18,42,2.364,43,2.579,44,1.749,53,2.73,54,2.836,226,3.273,294,1.749,406,2.02,437,3.927,454,3.621,455,3.591,456,3.591,462,3.591,463,3.591,464,4.246,465,3.591,466,2.579,467,4.246,468,4.246]],["title/injectables/MetaOptionsService.html",[93,1.144,454,1.896]],["body/injectables/MetaOptionsService.html",[3,0.313,4,0.279,5,0.279,7,0.426,9,0.552,10,0.026,11,1.061,14,0.313,15,0.013,17,0.786,18,0.018,19,0.018,20,1.028,44,1.44,53,2.834,62,1.796,77,0.857,93,1.587,94,1.796,96,3.073,97,0.502,98,1.945,100,0.922,104,1.945,106,1.44,129,2.365,130,2.979,134,3.19,138,2.088,139,1.587,140,1.216,145,1.947,152,2.124,155,2.124,156,2.088,158,2.124,164,2.124,170,2.124,171,1.947,172,2.124,173,1.921,177,2.124,191,0.786,221,3.167,226,3.332,294,2.203,296,2.602,406,2.247,409,3.514,427,1.546,431,2.214,454,2.979,457,1.664,465,2.957,466,2.124,469,4.524,470,2.957,471,3.498,472,3.479,473,3.498,474,5.35,475,4.725,476,3.498,477,3.156,478,2.336,479,2.957,480,2.957,481,3.498,482,2.602,483,2.602,484,3.498,485,2.336]],["title/classes/PatchPostDto.html",[15,0.013,486,2.068]],["body/classes/PatchPostDto.html",[3,0.369,4,0.329,5,0.329,7,0.419,9,0.519,10,0.026,14,0.369,15,0.02,17,1.303,18,0.02,19,0.02,77,0.748,97,0.592,100,0.805,113,1.584,142,1.448,161,2.061,162,2.703,167,2.327,183,2.296,184,1.823,186,3.067,187,3.197,188,2.931,189,2.703,191,1.45,192,1.654,204,1.212,208,2.516,275,3.516,281,1.961,285,3.197,332,3.067,431,1.481,486,3.197,487,4.451,488,5.264,489,4.451,490,5.264,491,6.109,492,4.545,493,4.123,494,4.123,495,3.487,496,5.264,497,3.067]],["title/classes/PatchUserDto.html",[15,0.013,498,2.274]],["body/classes/PatchUserDto.html",[3,0.433,4,0.385,5,0.385,7,0.463,9,0.52,10,0.026,14,0.433,15,0.018,18,0.022,19,0.022,148,2.237,184,2.138,189,3.199,343,2.693,345,3.598,431,1.737,489,4.914,495,4.09,498,3.881,499,4.09,500,6.23,501,5.811,502,4.09,503,4.09,504,3.598]],["title/entities/Post.html",[191,0.765,405,1.402]],["body/entities/Post.html",[3,0.194,4,0.173,5,0.173,7,0.266,9,0.487,10,0.026,14,0.194,15,0.008,17,0.916,18,0.012,19,0.012,53,0.958,67,3.04,75,1.207,77,1.187,87,1.317,96,1.113,97,0.311,100,1.187,105,2.438,140,1.516,142,1.121,148,1.876,161,1.554,163,2.55,191,1.425,192,1.05,194,4.183,195,3.059,196,3.887,197,4.381,198,3.872,199,3.49,200,3.304,201,2.353,202,2.754,203,4.183,204,1.789,211,2.475,213,2.887,216,1.448,217,1.448,218,1.448,221,1.113,226,1.207,227,4.754,235,3.059,237,2.825,243,1.833,261,3.887,269,2.31,292,1.833,293,1.833,294,0.893,301,2.825,325,3.64,340,2.485,378,3.387,380,2.231,405,1.886,406,2.178,407,1.317,414,2.722,416,3.755,417,4.237,419,1.833,426,3.852,427,1.477,428,2.825,433,2.485,466,1.317,482,1.613,483,1.613,505,1.833,506,2.168,507,3.341,508,4.419,509,2.168,510,3.872,511,3.887,512,2.168,513,3.887,514,3.887,515,2.825,516,2.168,517,2.168,518,3.341,519,2.168,520,2.168,521,2.168,522,2.168,523,2.168,524,2.168,525,1.833,526,3.341,527,2.168,528,2.168,529,2.168,530,3.341,531,3.341,532,2.825,533,2.168,534,2.168,535,1.833,536,2.168,537,2.168,538,1.833,539,1.833]],["title/controllers/PostsController.html",[0,1.144,540,2.274]],["body/controllers/PostsController.html",[0,1.48,2,0.827,3,0.22,4,0.196,5,0.196,7,0.476,9,0.491,10,0.026,11,0.827,14,0.22,15,0.009,16,1.371,17,0.553,18,0.014,19,0.014,77,0.887,97,0.353,98,1.515,100,0.954,104,2.408,106,2.013,110,1.495,112,1.495,113,0.946,126,2.049,127,3.697,129,2.766,138,2.161,139,1.641,140,1.258,142,1.51,144,2.737,148,1.321,156,2.161,161,1.384,167,1.627,173,1.321,183,3.167,191,1.489,201,2.325,204,1.437,208,2.462,431,1.755,432,2.968,441,1.645,443,2.458,444,2.458,445,3.906,447,3.906,450,3.256,451,1.645,452,3.494,453,3.494,457,1.171,460,3.265,486,3.454,492,2.737,497,2.737,540,2.458,541,2.082,542,3.551,543,3.68,544,3.329,545,3.68,546,3.68,547,2.462,548,4.406,549,2.462,550,4.35,551,1.832,552,2.462,553,4.641,554,2.235,555,2.462,556,2.462,557,2.462,558,2.462,559,3.112,560,2.462,561,2.462,562,2.462,563,2.462,564,2.462,565,1.832,566,2.737,567,3.726,568,1.832,569,2.453,570,2.082,571,2.462,572,2.462,573,3.892,574,4.406,575,2.462,576,2.462,577,2.462,578,2.462,579,2.462,580,2.462,581,2.462,582,2.462,583,2.462]],["title/modules/PostsModule.html",[20,1.001,34,2.068]],["body/modules/PostsModule.html",[2,1.72,3,0.353,4,0.315,5,0.315,7,0.408,9,0.589,10,0.026,11,0.888,14,0.353,15,0.015,18,0.019,19,0.019,20,1.91,22,1.747,23,1.747,24,2.029,25,2.029,26,1.747,27,2.918,28,2.029,34,4.105,35,3.553,36,3.277,37,2.63,38,2.029,39,2.029,42,2.852,43,2.399,44,1.627,124,3.341,191,0.888,294,1.627,406,2.436,407,2.399,466,2.399,540,3.796,542,3.451,569,3.553,570,3.341,584,3.341,585,3.951,586,3.341,587,3.951,588,3.951,589,3.341,590,3.951,591,3.951]],["title/injectables/PostsService.html",[93,1.144,569,1.896]],["body/injectables/PostsService.html",[3,0.159,4,0.142,5,0.142,7,0.228,9,0.497,10,0.027,11,0.642,14,0.159,15,0.007,17,0.922,18,0.011,19,0.011,44,0.732,62,2.781,67,2.4,77,0.871,87,3.289,93,0.959,94,0.913,96,2.107,97,0.255,98,1.176,100,0.937,103,0.99,104,2.289,105,1.098,106,2.161,126,1.591,129,2.667,130,3.359,134,2.284,135,1.503,136,2.496,138,2.122,139,1.612,140,1.236,142,1.49,144,2.125,145,2.503,152,1.079,153,1.187,154,1.503,155,1.079,156,2.231,158,2.492,161,1.702,164,2.73,170,2.73,171,2.503,172,3.289,173,2.077,177,3.449,178,1.503,180,2.741,183,2.81,191,1.467,192,0.558,193,1.503,196,2.125,202,3.015,211,3.065,294,0.732,405,1.176,406,0.845,407,1.079,427,0.786,431,1.614,432,2.916,457,0.845,466,1.079,472,3.065,477,3.712,478,1.187,479,3.801,480,1.503,482,2.665,483,2.665,485,2.741,486,2.916,497,2.125,508,2.416,538,2.416,539,2.416,542,3.619,544,1.994,551,2.125,554,1.079,568,1.322,569,1.591,589,1.503,592,1.503,593,2.125,594,2.416,595,2.857,596,2.591,597,4.103,598,1.777,599,2.857,600,1.777,601,1.777,602,2.857,603,2.857,604,1.777,605,2.416,606,2.857,607,1.777,608,2.416,609,2.857,610,1.777,611,1.777,612,1.777,613,1.777,614,3.052,615,1.777,616,1.777,617,1.777,618,1.777,619,2.857,620,2.857,621,2.857,622,3.029,623,1.777,624,1.777,625,1.777,626,1.777,627,1.777,628,1.777,629,1.777,630,1.777,631,1.777,632,2.857,633,1.777,634,2.857,635,1.777,636,2.857,637,1.777,638,2.857,639,1.777,640,2.857,641,1.777,642,2.857,643,1.777,644,2.857,645,1.777,646,1.503,647,1.777,648,1.777,649,1.777]],["title/entities/Tag.html",[269,1.505,405,1.402]],["body/entities/Tag.html",[3,0.234,4,0.208,5,0.208,7,0.462,9,0.45,10,0.026,14,0.234,15,0.01,18,0.014,19,0.014,67,2.937,75,1.455,77,1.18,97,0.375,100,1.205,105,2.499,139,1.801,140,1.444,142,1.255,161,1.685,163,2.54,191,1.337,192,1.208,195,3.361,199,3.582,200,3.582,204,1.816,213,2.584,216,1.745,217,1.745,218,1.745,235,4.231,269,2.875,325,3.75,340,3.743,378,3.123,380,3.361,405,2.208,412,3.858,414,3.048,416,3.582,417,4.125,421,3.252,424,3.858,426,3.746,427,2.017,430,1.745,431,0.938,432,1.587,433,2.861,510,4.255,511,3.394,513,4.173,514,4.173,515,3.252,525,2.21,532,3.252,542,3.056,544,1.455,646,3.252,650,2.21,651,5.032,652,5.032,653,5.032,654,2.613,655,4.563,656,2.613,657,2.613,658,2.613,659,2.613,660,2.613,661,2.613,662,2.613,663,2.613,664,2.613,665,2.613,666,2.613,667,2.613]],["title/controllers/TagsController.html",[0,1.144,668,2.274]],["body/controllers/TagsController.html",[0,1.573,2,0.918,3,0.245,4,0.218,5,0.218,7,0.469,9,0.489,10,0.026,11,0.893,14,0.245,15,0.01,16,1.523,17,0.614,18,0.015,19,0.015,77,0.85,97,0.393,98,1.637,100,0.914,104,2.347,106,1.929,110,1.661,112,1.661,113,1.051,127,3.461,129,2.716,130,3.421,138,2.071,139,1.573,140,1.206,142,1.568,145,2.608,156,2.273,161,1.791,173,1.428,191,1.052,201,2.228,202,3.173,204,1.377,208,2.347,269,2.896,297,3.275,299,2.034,431,1.846,441,1.827,443,3.807,444,2.655,445,3.807,447,3.807,450,3.173,451,1.827,452,3.435,453,3.435,457,1.301,460,3.129,544,3.559,550,4.24,554,3.123,566,3.484,573,3.484,596,2.405,668,2.655,669,2.313,670,3.976,671,3.976,672,3.976,673,2.735,674,4.684,675,2.735,676,2.735,677,2.313,678,2.735,679,2.735,680,3.976,681,2.735,682,4.348,683,2.735,684,2.313,685,2.735,686,2.735,687,2.735,688,2.735,689,2.313,690,2.735,691,3.976,692,2.735]],["title/modules/TagsModule.html",[20,1.001,35,1.896]],["body/modules/TagsModule.html",[2,1.793,3,0.377,4,0.336,5,0.336,7,0.425,9,0.568,10,0.026,11,0.947,14,0.377,15,0.016,18,0.02,19,0.02,20,1.939,22,1.863,23,1.863,24,2.164,25,2.164,26,1.863,27,3.008,28,3.008,35,3.714,37,2.741,38,2.164,39,2.164,42,2.347,43,2.559,44,1.736,202,3.262,269,1.863,596,3.524,668,3.913,684,3.564,693,3.564,694,3.564,695,3.564,696,4.215,697,3.564,698,4.215,699,4.215]],["title/injectables/TagsService.html",[93,1.144,596,1.749]],["body/injectables/TagsService.html",[3,0.218,4,0.194,5,0.194,7,0.291,9,0.489,10,0.026,11,0.82,14,0.218,15,0.009,17,0.548,18,0.019,19,0.014,44,1.004,62,2.497,67,1.737,77,0.945,87,3.541,93,1.226,94,1.252,96,2.497,97,0.35,98,1.504,100,1.017,104,2.401,106,2.003,126,2.033,129,2.76,130,3.477,134,2.708,138,2.303,139,1.749,140,1.341,142,1.641,145,2.708,152,1.48,153,1.628,155,1.48,156,2.303,158,1.48,161,1.873,164,2.953,170,2.953,171,2.708,172,3.443,173,2.141,177,3.321,180,1.628,191,0.82,202,3.246,269,2.817,297,3.044,299,1.813,427,1.078,431,1.964,450,2.708,457,1.16,472,2.953,477,3.894,478,1.628,485,3.248,544,3.044,551,2.717,554,2.218,593,2.717,596,1.875,614,2.717,682,3.088,697,2.061,700,2.061,701,3.652,702,3.652,703,2.438,704,2.438,705,4.379,706,3.652,707,2.438,708,2.438,709,3.652,710,2.438,711,3.652,712,3.652,713,2.438,714,2.438,715,2.438,716,2.438,717,2.438,718,2.438,719,2.438,720,2.438,721,3.652,722,3.652,723,3.652,724,2.438,725,2.438]],["title/entities/User.html",[148,1.223,405,1.402]],["body/entities/User.html",[3,0.267,4,0.238,5,0.238,7,0.337,9,0.44,10,0.026,14,0.267,15,0.011,17,1.41,18,0.016,19,0.016,67,2.546,75,1.661,77,1.179,85,3.774,97,0.428,100,1.178,105,2.497,128,2.219,131,3.981,139,1.421,140,1.089,142,1.353,148,2.311,161,1.776,163,1.661,191,1.202,192,1.33,201,1.419,204,1.775,213,3.267,346,4.204,347,4.526,348,4.526,351,2.523,354,4.779,357,2.523,378,2.98,380,2.827,405,2.327,414,3.285,416,3.774,417,4.249,426,4.34,427,1.871,430,1.993,511,2.219,513,4.588,514,4.588,542,3.432,726,2.523,727,6.168,728,2.984,729,2.984,730,2.984,731,2.984,732,2.984,733,2.984,734,2.984,735,4.232,736,2.984,737,4.232]],["title/controllers/UsersController.html",[0,1.144,738,2.274]],["body/controllers/UsersController.html",[0,1.348,2,0.711,3,0.189,4,0.169,5,0.169,7,0.488,9,0.512,10,0.026,11,0.902,14,0.189,15,0.008,16,1.179,17,0.476,18,0.012,19,0.012,62,1.684,77,1.012,97,0.304,98,1.351,100,0.882,104,2.297,106,1.862,110,1.286,112,1.286,113,0.814,126,1.826,127,3.553,129,2.674,136,1.91,138,1.999,139,1.738,140,1.164,142,1.705,148,2.302,156,2.466,161,1.626,162,1.087,167,1.45,173,1.624,191,0.902,201,2.151,204,1.33,207,3.02,208,2.491,213,2.322,230,3.143,343,2.881,382,3.605,384,3.317,389,3.387,392,3.85,395,2.774,431,1.624,432,1.992,441,1.414,443,2.191,444,2.191,445,3.605,447,3.726,450,3.258,451,2.682,452,3.268,453,3.268,457,1.007,460,3.02,492,2.44,498,3.908,504,2.44,544,2.881,550,4.149,553,4.376,554,1.992,559,2.774,565,2.44,566,2.987,567,3.824,568,1.575,573,3.364,677,1.79,689,1.79,738,2.191,739,1.79,740,2.774,741,3.28,742,4.015,743,4.015,744,1.79,745,4.015,746,2.117,747,2.117,748,4.893,749,2.117,750,2.117,751,2.117,752,2.117,753,2.117,754,2.117,755,2.117,756,2.117,757,2.117,758,2.117,759,4.015,760,2.117,761,2.774,762,2.117,763,1.79,764,1.79,765,2.117,766,2.117,767,2.117,768,2.117,769,2.117,770,2.117,771,2.117,772,2.117,773,2.117,774,2.117,775,2.117,776,2.117,777,2.117,778,2.117]],["title/modules/UsersModule.html",[20,1.001,36,1.749]],["body/modules/UsersModule.html",[2,1.723,3,0.354,4,0.316,5,0.316,7,0.409,9,0.595,10,0.026,11,0.89,14,0.354,15,0.015,18,0.019,19,0.019,20,1.911,22,1.751,23,1.751,24,2.034,25,2.034,26,1.751,27,2.921,28,2.921,32,2.856,36,3.383,37,2.634,38,2.034,39,2.034,42,2.205,43,2.405,44,1.631,45,3.349,47,2.645,122,3.426,136,3.236,148,1.422,191,1.152,384,3.167,430,2.645,738,3.8,764,3.349,779,3.349,780,3.349,781,3.349,782,3.96,783,3.96,784,3.349,785,3.96,786,3.349,787,3.349,788,3.96,789,3.96]],["title/injectables/UsersService.html",[93,1.144,136,1.62]],["body/injectables/UsersService.html",[3,0.197,4,0.176,5,0.176,7,0.397,9,0.529,10,0.026,11,0.76,14,0.197,15,0.008,17,0.925,18,0.013,19,0.013,44,0.908,47,1.472,62,2.701,73,1.64,77,0.838,87,3.194,93,1.136,94,1.132,96,2.372,97,0.316,98,1.393,100,0.902,103,1.884,104,2.166,106,1.902,114,3.038,122,1.472,126,1.884,129,2.562,130,3.227,134,2.572,136,1.61,138,2.042,139,1.551,140,1.189,142,1.447,145,2.293,148,2.302,152,1.339,153,1.472,155,1.339,156,2.421,157,1.864,158,2.501,161,1.821,162,1.738,164,2.501,167,2.042,170,2.501,171,2.293,172,3.194,173,2.081,177,3.027,180,3.086,182,1.864,188,1.884,230,2.805,268,3.907,343,2.929,346,2.517,384,3.147,389,2.805,392,3.913,427,0.975,431,1.659,450,1.884,457,1.049,472,2.805,477,3.871,478,1.472,485,2.751,504,1.64,565,3.437,593,2.517,594,2.862,605,3.483,608,3.483,614,3.064,622,2.862,740,2.862,744,2.862,761,1.864,763,1.864,784,1.864,786,1.864,787,1.864,790,1.864,791,3.384,792,2.205,793,4.62,794,4.984,795,2.205,796,3.384,797,2.205,798,4.984,799,3.384,800,2.205,801,3.384,802,3.384,803,3.384,804,2.205,805,3.384,806,2.205,807,2.205,808,2.205,809,2.205,810,3.384,811,3.384,812,2.205,813,3.384,814,2.205,815,2.205,816,2.205,817,2.205,818,2.205,819,2.205,820,2.205,821,2.205,822,2.205,823,2.205,824,2.205,825,2.205,826,2.205,827,2.205]],["title/coverage.html",[828,3.451]],["body/coverage.html",[0,2.055,1,2.275,5,0.271,6,2.881,10,0.026,12,1.897,15,0.024,18,0.017,19,0.017,26,1.506,40,2.534,53,1.506,54,2.275,60,2.534,63,2.534,77,0.618,93,2.055,95,2.881,108,2.275,109,2.881,114,1.749,125,2.881,136,1.62,148,1.223,173,1.223,183,1.897,185,2.881,186,3.452,191,1.043,221,1.749,269,1.506,294,2.334,295,2.534,297,1.897,298,2.534,321,2.881,326,2.881,343,1.897,344,2.881,345,3.452,382,2.275,383,3.452,384,2.584,385,2.881,389,2.069,390,2.881,402,3.924,405,2.334,406,1.62,407,2.069,408,2.881,437,2.275,438,2.881,454,1.897,469,2.881,470,2.881,486,2.069,487,2.881,498,2.275,499,2.881,505,2.881,535,2.881,540,2.275,541,2.881,569,1.897,592,2.881,596,1.749,650,2.881,668,2.275,669,2.881,700,2.881,726,2.881,738,2.275,739,2.881,790,2.881,828,2.534,829,3.407,830,3.407,831,3.407,832,6.949,833,6.373,834,4.641,835,4.641,836,5.93,837,3.407,838,3.407,839,2.881,840,2.881,841,3.407,842,3.407,843,3.407,844,5.668,845,3.407,846,5.278,847,3.407,848,3.407]],["title/dependencies.html",[23,1.809,849,2.408]],["body/dependencies.html",[10,0.026,11,1.059,15,0.021,18,0.021,19,0.021,23,2.085,44,1.942,47,3.15,113,1.812,281,2.243,291,3.15,322,3.988,427,2.085,502,3.988,503,3.988,850,4.716,851,4.716,852,6.162,853,4.716,854,4.716,855,4.716,856,4.716,857,4.716,858,4.716,859,4.716,860,4.716,861,4.716,862,4.716,863,4.716,864,4.716,865,4.716,866,4.716,867,4.716,868,4.716,869,4.716,870,4.716]],["title/miscellaneous/enumerations.html",[871,1.585,872,3.461]],["body/miscellaneous/enumerations.html",[10,0.026,18,0.022,19,0.022,97,0.692,191,1.303,197,4.315,230,3.523,231,4.905,232,4.905,261,4.315,262,4.905,263,4.905,264,4.905,265,4.905,319,3.513,871,2.685,872,4.078,873,4.823,874,4.823,875,4.823,876,4.823]],["title/miscellaneous/functions.html",[871,1.585,877,3.461]],["body/miscellaneous/functions.html",[8,3.553,10,0.023,18,0.023,19,0.023,26,2.946,97,0.764,840,4.498,871,2.961,877,4.498,878,5.319]],["title/index.html",[97,0.409,386,2.408,879,2.848]],["body/index.html",[4,0.335,7,0.335,10,0.026,18,0.02,19,0.02,208,2.41,211,2.553,472,2.553,828,3.128,880,4.205,881,4.205,882,5.33,883,4.205,884,4.205,885,4.205,886,4.205,887,4.205,888,4.205,889,5.852,890,4.205,891,4.205,892,4.205,893,6.59,894,4.205,895,4.205,896,4.205,897,6.487,898,4.205,899,4.205,900,5.33,901,4.205,902,3.555,903,4.205,904,4.205,905,5.33,906,4.507,907,4.205,908,4.205,909,4.205,910,5.33,911,5.33,912,4.205,913,4.205,914,4.205,915,4.205,916,4.205,917,3.555,918,4.205,919,4.205,920,4.205,921,4.205,922,4.205,923,4.205,924,4.205,925,4.205,926,4.205,927,4.205,928,4.205,929,4.205,930,4.205,931,4.205,932,4.205,933,4.205,934,3.555]],["title/modules.html",[22,2.051]],["body/modules.html",[10,0.022,18,0.022,19,0.022,21,3.334,22,2.207,32,2.779,33,3.031,34,3.031,35,2.779,36,2.563,917,5.718,935,6.762,936,6.762,937,6.762]],["title/overview.html",[938,3.923]],["body/overview.html",[2,1.294,10,0.026,12,3.126,18,0.019,19,0.019,20,1.133,21,4.571,22,1.703,23,1.703,24,1.979,25,1.979,26,1.703,27,1.979,28,1.979,29,3.258,30,3.258,31,3.258,32,3.529,33,3.752,34,4.022,35,3.595,36,3.316,37,2.587,38,1.979,39,1.979,75,2.145,94,1.979,114,3.316,118,3.258,119,3.258,120,3.258,136,3.072,184,1.703,300,3.258,454,3.126,462,3.258,463,3.258,569,3.126,584,3.258,586,3.258,596,3.316,693,3.258,694,3.258,695,3.258,779,3.258,780,3.258,781,3.258,938,3.258,939,5.614,940,3.853]],["title/properties.html",[192,1.286,849,2.408]],["body/properties.html",[7,0.422,10,0.025,18,0.023,19,0.023,192,1.666,211,3.22,934,4.484,941,5.302,942,5.302,943,5.302]],["title/miscellaneous/variables.html",[871,1.585,944,3.461]],["body/miscellaneous/variables.html",[10,0.025,18,0.022,19,0.022,40,3.618,60,4.337,63,4.337,64,4.113,97,0.698,207,3.249,319,2.994,378,3.246,839,4.113,871,2.708,902,4.113,906,4.113,944,4.113,945,4.864,946,4.864,947,4.864,948,4.864,949,4.864,950,4.864,951,4.864,952,4.864,953,4.864,954,4.864,955,4.864,956,6.621,957,4.864,958,4.864,959,4.864,960,4.864]],["title/routes.html",[961,3.923]],["body/routes.html",[10,0.023,18,0.023,19,0.023,961,4.628]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":402,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":942,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.25",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":395,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":515,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["12/12",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["1})@apiquery({name",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@isint()@isnotempty",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isoptional()@type(undefined",{"_index":387,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1})@isnumber()@isnotempty",{"_index":493,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["2",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":443,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":340,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["3.2.3",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4/4",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["6",{"_index":939,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":940,"title":{},"body":{"overview.html":{}}}],["8.12.0",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":727,"title":{},"body":{"entities/User.html":{}}}],["already",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["alternative",{"_index":538,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["amazing",{"_index":918,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":452,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({type",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":453,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('meta",{"_index":459,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('posts",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":686,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":895,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":888,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":21,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":12,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["associated",{"_index":665,"title":{},"body":{"entities/Tag.html":{}}}],["async",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":108,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["authmodule",{"_index":32,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["authservice",{"_index":114,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["await",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":919,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('login",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":485,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{}}}],["body",{"_index":451,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":937,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":935,"title":{},"body":{"modules.html":{}}}],["building",{"_index":883,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":433,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":422,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["changeme",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["character",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":15,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":462,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":463,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":584,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":585,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":586,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":693,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":694,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":695,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":779,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":781,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":780,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coalescing",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["column",{"_index":426,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":787,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":789,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":793,"title":{},"body":{"injectables/UsersService.html":{}}}],["confirmation",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":471,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(profileconfiguration",{"_index":792,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(tagsrepository",{"_index":703,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["containing",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{}}}],["content",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":458,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":685,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":765,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":828,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":431,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(createpostdto",{"_index":599,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":475,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":706,"title":{},"body":{"injectables/TagsService.html":{}}}],["created",{"_index":444,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["createdate",{"_index":651,"title":{},"body":{"entities/Tag.html":{}}}],["createdatecolumn",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{}}}],["createmetaoptions",{"_index":439,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createpostmetaoptionsdto",{"_index":440,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpost",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":183,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":221,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createtag",{"_index":670,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":687,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagdto",{"_index":673,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtagdto",{"_index":297,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":343,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["credentials",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["database_host",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_name",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_password",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_port",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_user",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["delete')@apioperation({summary",{"_index":681,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(':id",{"_index":689,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":677,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id/soft",{"_index":680,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete()@apioperation({summary",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(@query('id",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(id",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":652,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":655,"title":{},"body":{"entities/Tag.html":{}}}],["deletetag",{"_index":671,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@param('id",{"_index":690,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":676,"title":{},"body":{"controllers/TagsController.html":{}}}],["deleteuser",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":896,"title":{},"body":{"index.html":{}}}],["directional",{"_index":435,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["draft",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["draft'})@isenum(poststatus)@isnotempty",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["dtos/create",{"_index":457,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":907,"title":{},"body":{"index.html":{}}}],["each",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":508,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["efficient",{"_index":884,"title":{},"body":{"index.html":{}}}],["eight",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/meta",{"_index":465,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entities/post.entity",{"_index":589,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/user.entity",{"_index":784,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":405,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":872,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentschema",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["example",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["exist",{"_index":723,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":489,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@isoptional()@isboolean",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["featured",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetched",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":614,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":594,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(id",{"_index":799,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":603,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":701,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":709,"title":{},"body":{"injectables/TagsService.html":{}}}],["findone",{"_index":595,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone(id",{"_index":606,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":791,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":803,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["form",{"_index":605,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["founduser",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":882,"title":{},"body":{"index.html":{}}}],["function",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":877,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":767,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id?')@apioperation({summary",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid?')@apioperation({summary",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":386,"title":{"index.html":{}},"body":{"classes/GetUsersParamDto.html":{}}}],["getusers",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":382,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusersparamdto.id",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersquerydto",{"_index":389,"title":{"classes/GetUsersQueryDto.html":{}},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["grow",{"_index":914,"title":{},"body":{"index.html":{}}}],["handle",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["handling",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["hello",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":925,"title":{},"body":{"index.html":{}}}],["host",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["html",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["http",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional()@maxlength(1024",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg",{"_index":342,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isoptional()@maxlength(1024",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":931,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://typeorm.io/decorator",{"_index":666,"title":{},"body":{"entities/Tag.html":{}}}],["id",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ignore",{"_index":483,"title":{},"body":{"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["image",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":719,"title":{},"body":{"injectables/TagsService.html":{}}}],["incorrect",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":97,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":93,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":478,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":480,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":613,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":715,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":892,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":894,"title":{},"body":{"index.html":{}}}],["integer",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isarray",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isauth(userid",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["isiso8601",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson()@isnotempty",{"_index":323,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isjson()@isoptional",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnumber",{"_index":496,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["isoptional()@isint()@type(undefined)@transform",{"_index":396,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["isstring",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isurl",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["john",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@example.com",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@example.com'})@isemail()@isnotempty()@maxlength(96",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["joi",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["joi.number().port().default(5432",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":921,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":429,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":530,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":928,"title":{},"body":{"index.html":{}}}],["key",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["last",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastname",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["legend",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":514,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":934,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":911,"title":{},"body":{"index.html":{}}}],["limit",{"_index":392,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["load",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{}}}],["login",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":593,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["manytomany",{"_index":532,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":525,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":531,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["maximum",{"_index":398,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["maxlength",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":322,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"dependencies.html":{}}}],["metaoption",{"_index":406,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":479,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptions",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":437,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":33,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":474,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptionsservice",{"_index":454,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":477,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":341,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":871,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":910,"title":{},"body":{"index.html":{}}}],["mode",{"_index":900,"title":{},"body":{"index.html":{}}}],["module",{"_index":20,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":22,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":924,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":711,"title":{},"body":{"injectables/TagsService.html":{}}}],["myśliwiec",{"_index":929,"title":{},"body":{"index.html":{}}}],["name",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["needs",{"_index":491,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":889,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":933,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":338,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["nestjs'})@isstring()@isnotempty()@minlength(3)@maxlength(256",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":502,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":798,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":881,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('post",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('tag",{"_index":722,"title":{},"body":{"injectables/TagsService.html":{}}}],["notfoundexception('tags",{"_index":720,"title":{},"body":{"injectables/TagsService.html":{}}}],["notfoundexception('user",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(error",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":893,"title":{},"body":{"index.html":{}}}],["null",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["nullable",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["nullish",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["number",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["ondelete",{"_index":421,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":737,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":734,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":428,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":912,"title":{},"body":{"index.html":{}}}],["operator",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["option",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option'})@apiresponse({status",{"_index":442,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["option.entity",{"_index":466,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:18",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":425,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":423,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.controller",{"_index":467,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":438,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:30",{"_index":446,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":321,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:15",{"_index":324,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":464,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":456,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":470,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":473,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:30",{"_index":476,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/entities/meta",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":469,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":938,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":849,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pages",{"_index":393,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["param",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":385,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:17",{"_index":388,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":495,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":490,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":501,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password123",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123@'})@isstring()@isnotempty()@minlength(3)@maxlength(96)@matches(/^(?=.*[a",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":776,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{}}}],["patching",{"_index":500,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["patchpostdto",{"_index":486,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(id",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":498,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pattern",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["payload",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["per",{"_index":399,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["person",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":922,"title":{},"body":{"index.html":{}}}],["port",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":191,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isenum(posttype)@isnotempty",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(512",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post()@apioperation({summary",{"_index":441,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.content",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":497,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:113",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:130",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:145",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:163",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:188",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:197",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:20",{"_index":494,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:29",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["postmetaoptions",{"_index":448,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["postrepository",{"_index":612,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts'})@apiresponse({status",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.author",{"_index":735,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":588,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/1",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":540,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":34,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":597,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":569,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":537,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":482,"title":{},"body":{"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["primarygeneratedcolumn",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":902,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile_api_key",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profileconfig",{"_index":786,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":796,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":880,"title":{},"body":{"index.html":{}}}],["project",{"_index":913,"title":{},"body":{"index.html":{}}}],["promise",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":192,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":325,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["providers",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":455,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":684,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":764,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["published",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('limit",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":768,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":390,"title":{},"body":{"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":400,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:24",{"_index":397,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:33",{"_index":401,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["query.dto.ts:42",{"_index":403,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["querying",{"_index":391,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["r\\n",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":923,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reference",{"_index":667,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["relations",{"_index":539,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["relationship",{"_index":436,"title":{},"body":{"entities/MetaOption.html":{}}}],["remove",{"_index":602,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":472,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":449,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["required",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":450,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["responsible",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["route",{"_index":447,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":961,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":897,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["sample_token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":885,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":886,"title":{},"body":{"index.html":{}}}],["service",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["side",{"_index":887,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":608,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["soft",{"_index":682,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":702,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(id",{"_index":712,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":672,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@param('id",{"_index":692,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":679,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":916,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.validation.ts",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":878,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":873,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":874,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":785,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:37",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/config/environment.validation.ts",{"_index":839,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":487,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity",{"_index":430,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":505,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:28",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:31",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:34",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:37",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:45",{"_index":524,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:48",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:51",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:54",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:57",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:61",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:67",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:70",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:39",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:65",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":587,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":592,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:118",{"_index":610,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:155",{"_index":601,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:18",{"_index":598,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:41",{"_index":600,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:63",{"_index":604,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:99",{"_index":607,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":611,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":700,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":704,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:29",{"_index":707,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:43",{"_index":710,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:64",{"_index":708,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:84",{"_index":713,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":650,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:24",{"_index":659,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:27",{"_index":660,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:30",{"_index":663,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":657,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:36",{"_index":662,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:39",{"_index":658,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":661,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":654,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":664,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":656,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":669,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:25",{"_index":675,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:38",{"_index":678,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:51",{"_index":683,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":590,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":696,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":383,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":499,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["src/users/entities/user.entity.ts",{"_index":726,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":730,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":729,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":732,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":728,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":733,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":731,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":736,"title":{},"body":{"entities/User.html":{}}}],["src/users/providers/users.service",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":790,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:101",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:17",{"_index":795,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:39",{"_index":797,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:69",{"_index":800,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":782,"title":{},"body":{"modules/UsersModule.html":{}}}],["staging",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":898,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":901,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":903,"title":{},"body":{"index.html":{}}}],["started",{"_index":879,"title":{"index.html":{}},"body":{}}],["starter",{"_index":891,"title":{},"body":{"index.html":{}}}],["statements",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":926,"title":{},"body":{"index.html":{}}}],["story",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["successfully",{"_index":445,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":460,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":917,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":936,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":535,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":269,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":674,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.'})@isstring()@isoptional",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:22",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:38",{"_index":337,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:64",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:78",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":697,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["tagrepository",{"_index":714,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":698,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":668,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":35,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":705,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":596,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":906,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":909,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":908,"title":{},"body":{"index.html":{}}}],["tests",{"_index":905,"title":{},"body":{"index.html":{}}}],["text",{"_index":510,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":915,"title":{},"body":{"index.html":{}}}],["this.findonebyid(id",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionsrepository.create(createpostmetaoptionsdto",{"_index":481,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":484,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":461,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":716,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":724,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":718,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":721,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":717,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":725,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":688,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":691,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":617,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findandcount",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(id",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(user?.id",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["throw",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["todo",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":394,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["touch",{"_index":927,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["transform",{"_index":404,"title":{},"body":{"classes/GetUsersQueryDto.html":{}}}],["transformer",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":932,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":427,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":468,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":591,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":699,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":788,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":503,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":890,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":511,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["uni",{"_index":434,"title":{},"body":{"entities/MetaOption.html":{}}}],["unique",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":904,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":943,"title":{},"body":{"properties.html":{}}}],["update",{"_index":432,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["update(patchpostdto",{"_index":609,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":492,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":653,"title":{},"body":{"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":424,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{}}}],["updatepost",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["updating",{"_index":488,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["url",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["usefactory",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":148,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":504,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:31",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:60",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:94",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.isauth",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["userrepository",{"_index":794,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":384,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":783,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.length",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.slice((page",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/users.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":738,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":36,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":136,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["valid",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["valid('development",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatenested",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validateuser",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationschema",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersQueryDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":513,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":944,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":941,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":899,"title":{},"body":{"index.html":{}}}],["website",{"_index":930,"title":{},"body":{"index.html":{}}}],["without",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["world",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":801,"title":{},"body":{"injectables/UsersService.html":{}}}],["you'd",{"_index":920,"title":{},"body":{"index.html":{}}}],["z0",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Controller for the application\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * Controller for the application\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Main module of the application\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentSchema from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n/**\n * Main module of the application\n * @description Main module of the application\n * @module AppModule\n */\n@Module({\n  imports: [\n    AuthModule,\n    UsersModule,\n    PostsModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentSchema,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        entities: ['dist/**/*.entity{.ts,.js}'],\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for application\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:12\n                        \n                    \n\n\n            \n                \n                        Get a hello message\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A hello message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service for application\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Get a hello message\n   * @returns {string} A hello message\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for auth\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { AuthService } from './providers/auth.service';\n\n/**\n * Controller for auth\n */\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling authentication\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                isAuth\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor of Auth service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\n\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service responsible for handling authentication\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructor of Auth service\n   * @description Injects UsersService\n   * @param usersService\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public async validateUser(username: string, password: string): Promise {\n    if (username === 'john' && password === 'changeme') {\n      return { id: 1, username: 'john' };\n    }\n    return null;\n  }\n\n  public async login(user: any) {\n    try {\n      const foundUser = this.usersService.findAll(user?.id);\n\n      return { data: foundUser, token: 'SAMPLE_TOKEN' };\n    } catch (error) {\n      throw new BadRequestException('Login credentials are incorrect');\n    }\n  }\n\n  public async isAuth(userId: number) {\n    try {\n      const user = await this.usersService.findOneById(userId);\n\n      if (!user) {\n        throw new NotFoundException('User not found');\n      }\n\n      const isAuth = user.isAuth;\n      return isAuth;\n    } catch (error) {\n      throw new BadRequestException('User not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:197\n                        \n                    \n\n            \n                \n                    ID of post author\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', required: false, example: 'This is the content of the post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n            \n                \n                    Content of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'url', required: false, description: 'Featured image for post', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:130\n                        \n                    \n\n            \n                \n                    Featured image for post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:188\n                        \n                    \n\n            \n                \n                    Meta options for the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', enum: PostType, required: true, description: 'Possible values - 'post', 'page', 'story', 'series'', example: 'post'})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:44\n                        \n                    \n\n            \n                \n                    Type of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'date', required: false, description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:145\n                        \n                    \n\n            \n                \n                    Publish date of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'json', required: false, description: 'Serialize JSON object to avoid error', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n            \n                \n                    Schema of the post\nExample :{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Person\"\n}\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, example: 'my-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n            \n                \n                    Slug of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', enum: PostStatus, required: true, description: 'Possible values - 'draft', 'scheduled', 'review', 'published'', example: 'draft'})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n            \n                \n                    Status of the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, description: 'Array of tag ids', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:163\n                        \n                    \n\n            \n                \n                    Tags for the post\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, example: 'New Post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:29\n                        \n                    \n\n            \n                \n                    Title of the post\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsArray, IsEnum, IsInt, IsString } from 'class-validator';\nimport { IsUrl, IsISO8601, IsJSON } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\nimport { ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { PostType } from '../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from 'src/meta-options/dtos/create-post-meta-options.dto';\n// import { CreateTagDto } from 'src/tags/dtos/create-tag.dto';\n\n/**\n * Data transfer object (DTO) for creating a post.\n */\nexport class CreatePostDto {\n  /**\n   * Title of the post\n   * @example New Post\n   * @minLength 4\n   * @maxLength 512\n   */\n  @ApiProperty({ type: 'string', required: true, example: 'New Post' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(512)\n  readonly title: string;\n\n  /**\n   * Type of the post\n   * @example Possible values - 'post', 'page', 'story', 'series'\n   */\n  @ApiProperty({\n    type: 'enum',\n    enum: PostType,\n    required: true,\n    description: \"Possible values - 'post', 'page', 'story', 'series'\",\n    example: 'post',\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  readonly postType: PostType;\n\n  /**\n   * Slug of the post\n   * @description Slug of the post\n   * @example my-post\n   * @pattern ^[a-z0-9]+(?:-[a-z0-9]+)*$\n   */\n  @ApiProperty({ type: 'string', required: true, example: 'my-post' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  readonly slug: string;\n\n  /**\n   * Status of the post\n   * @description Status of the post\n   * @example Possible values - 'draft', 'scheduled', 'review', 'published'\n   */\n  @ApiProperty({\n    type: 'enum',\n    enum: PostStatus,\n    required: true,\n    description:\n      \"Possible values - 'draft', 'scheduled', 'review', 'published'\",\n    example: 'draft',\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  readonly status: PostStatus;\n\n  /**\n   * Content of the post\n   * @description Content of the post\n   * @example This is the content of the post.\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'string',\n    required: false,\n    example: 'This is the content of the post.',\n  })\n  @IsString()\n  @IsOptional()\n  readonly content?: string;\n\n  /**\n   * Schema of the post\n   * @description Schema of the post\n   * @example\n   * {\n   *   \"@context\": \"https://schema.org\",\n   *   \"@type\": \"Person\"\n   * }\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'json',\n    required: false,\n    description: 'Serialize JSON object to avoid error',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsJSON()\n  @IsOptional()\n  readonly schema?: string;\n\n  /**\n   * Featured image for post\n   * @description Featured image for post\n   * @example http://localhost.com/images/image1.jpg\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'url',\n    required: false,\n    description: 'Featured image for post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  readonly featuredImageURL?: string;\n\n  /**\n   * Publish date of the post\n   * @description Publish date of the post\n   * @example 2024-03-16T07:46:32+0000\n   */\n  @ApiPropertyOptional({\n    type: 'date',\n    required: false,\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  readonly publishOn?: Date;\n\n  /**\n   * Tags for the post\n   * @description Tags for the post\n   * @example [1, 2]\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    description: 'Array of tag ids',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  // @Type(() => CreateTagDto)\n  readonly tags?: number[];\n\n  /**\n   * Meta options for the post\n   * @description Meta options for the post\n   * @example { \"key\": \"sidebarEnabled\", \"value\": true }\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'a JSON string',\n          example: '{ \"sidebarEnabled\": true }',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  readonly metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * ID of post author\n   * @example 1\n   */\n  @ApiProperty({ type: 'integer', required: true, example: 1 })\n  @IsInt()\n  @IsNotEmpty()\n  readonly authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) with metadata options for creating a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:15\n                        \n                    \n\n            \n                \n                    Metadata value\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsJSON } from 'class-validator';\n\n/**\n * Data transfer object (DTO) with metadata options for creating a post.\n * @description Data transfer object (DTO) with metadata options for creating a post.\n * @property {JSON} metaValue - Metadata value\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * Metadata value\n   * @example { \"key\": \"value\" }\n   */\n  @IsJSON()\n  @IsNotEmpty()\n  readonly metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Description of tag', example: 'This is a tag.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n            \n                \n                    Description of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image URL of tag', example: 'https://example.com/image.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:78\n                        \n                    \n\n            \n                \n                    Featured image URL of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of tag', example: 'nestjs'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n            \n                \n                    Name of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Schema of tag', example: '{ \"key\": \"value\" }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:64\n                        \n                    \n\n            \n                \n                    Schema of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug of tag', example: 'my-tag'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:38\n                        \n                    \n\n            \n                \n                    Slug of tag\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsJSON, IsString, IsUrl } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data transfer object (DTO) for creating a tag.\n */\nexport class CreateTagDto {\n  /**\n   * Name of tag\n   * @description Name of tag\n   * @example nestjs\n   * @minLength 3\n   * @maxLength 256\n   */\n  @ApiProperty({ description: 'Name of tag', example: 'nestjs' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(256)\n  readonly name: string;\n\n  /**\n   * Slug of tag\n   * @description Slug of tag\n   * @example my-tag\n   * @pattern ^[a-z0-9]+(?:-[a-z0-9]+)*$\n   */\n  @ApiProperty({ description: 'Slug of tag', example: 'my-tag' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * Description of tag\n   * @description Description of tag\n   * @example This is a tag.\n   */\n  @ApiPropertyOptional({\n    description: 'Description of tag',\n    example: 'This is a tag.',\n  })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Schema of tag\n   * @description Schema of tag\n   * @example { \"key\": \"value\" }\n   */\n  @ApiPropertyOptional({\n    description: 'Schema of tag',\n    example: '{ \"key\": \"value\" }',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  /**\n   * Featured image URL of tag\n   * @description Featured image URL of tag\n   * @example https://example.com/image.jpg\n   */\n  @ApiPropertyOptional({\n    description: 'Featured image URL of tag',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  featuredImageURL?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating a new user\nExample :\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isAuth\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:60\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    User first name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isAuth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User authentication status', example: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:94\n                        \n                    \n\n            \n                \n                    User authentication status\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name', example: 'Doe'})@IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    User last name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:78\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsEmail, IsBoolean } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data transfer object for creating a new user\n * @description Data transfer object for creating a new user\n * @class CreateUserDto\n * @export CreateUserDto\n * @example { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'Password123@', isAuth: false }\n * @property {string} firstName - User first name\n * @property {string} lastName - User last name\n * @property {string} email - User email\n * @property {string} password - User password\n * @property {boolean} isAuth - User authentication status\n */\nexport class CreateUserDto {\n  /**\n   * User first name\n   * @description User first name\n   * @type {string}\n   * @example John\n   * @required true\n   */\n  @ApiProperty({ description: 'User first name', example: 'John' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly firstName: string;\n\n  /**\n   * User last name\n   * @description User last name\n   * @type {string}\n   * @example Doe\n   * @default null\n   * @optional true\n   */\n  @ApiPropertyOptional({ description: 'User last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * User email\n   * @description User email\n   * @type {string}\n   * @example johndoe@example.com\n   * @required true\n   * @unique true\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User password\n   * @description User password\n   * @type {string}\n   * @example password123@\n   * @required true\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n\n  /**\n   * User authentication status\n   * @description User authentication status\n   * @type {boolean}\n   * @example false\n   * @default false\n   * @optional true\n   */\n  @ApiPropertyOptional({\n    description: 'User authentication status',\n    example: false,\n  })\n  @IsOptional()\n  @IsBoolean()\n  isAuth?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 1})@IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:17\n                        \n                    \n\n            \n                \n                    User ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO for getting users\n */\nexport class GetUsersParamDto {\n  /**\n   * User ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'User ID', example: 1 })\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  readonly id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersQueryDto.html":{"url":"classes/GetUsersQueryDto.html","title":"class - GetUsersQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for querying users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                pages\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:24\n                        \n                    \n\n            \n                \n                    The maximum number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:15\n                        \n                    \n\n            \n                \n                    The page number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        pages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:33\n                        \n                    \n\n            \n                \n                    The total number of pages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:42\n                        \n                    \n\n            \n                \n                    The total number of items.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\n\n/**\n * DTO for querying users.\n */\nexport class GetUsersQueryDto {\n  /**\n   * The page number.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 1)\n  page?: number = 1;\n\n  /**\n   * The maximum number of items per page.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 10)\n  limit?: number = 10;\n\n  /**\n   * The total number of pages.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 1)\n  pages?: number = 1;\n\n  /**\n   * The total number of items.\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Transform(({ value }) => value ?? 0)\n  total?: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entities/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Meta Option Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entities/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToOne, JoinColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nimport { Post } from 'src/posts/entities/post.entity';\n\n/**\n * Meta Option Entity\n * @description Meta Option Entity\n * @property {number} id - Meta Option ID\n * @property {string} metaValue - Meta Option value\n * @property {Date} createdDate - Meta Option create date\n * @property {Date} updatedDate - Meta Option update date\n */\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'json', nullable: false })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, { onDelete: 'CASCADE' })\n  @JoinColumn() // For uni-directional relationship\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for meta-options\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new meta-option'})@ApiResponse({status: 201, description: 'Meta-Option created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Route for handling create postMetaOptions requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body } from '@nestjs/common';\nimport { Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\n\n/**\n * Controller for meta-options\n * @description Controller for meta-options\n * @module MetaOptionsController\n */\n@Controller('meta-options')\n@ApiTags('Meta-Options')\nexport class MetaOptionsController {\n  /**\n   * Constructor for meta-options controller\n   * @param {MetaOptionsService} metaOptionsService\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Route for handling create postMetaOptions requests\n   * @param createPostMetaOptionsDto\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new meta-option' })\n  @ApiResponse({ status: 201, description: 'Meta-Option created successfully' })\n  public createMetaOptions(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for meta-options\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { MetaOption } from './entities/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for meta-options\n * @description Module for meta-options\n * @module MetaOptionsModule\n */\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for meta-options\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for meta-options service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to create a new meta option\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Create\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { MetaOption } from '../entities/meta-option.entity';\n\n/**\n * Service for meta-options\n * @description Service for meta-options\n * @module MetaOptionsService\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Constructor for meta-options service\n   * @description Injects MetaOptionRepository\n   * @param metaOptionsRepository\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n  /**\n   * The method to create a new meta option\n   * @param createPostMetaOptionsDto\n   * @returns Create\n   */\n  public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    try {\n      const metaOption = this.metaOptionsRepository.create(createPostMetaOptionsDto); // prettier-ignore\n      return await this.metaOptionsRepository.save(metaOption);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for updating a post.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of post that needs to be updated', example: 1})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:20\n                        \n                    \n\n            \n                \n                    ID of post that needs to be updated\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * Data transfer object (DTO) for updating a post.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * ID of post that needs to be updated\n   * @example 1\n   */\n  @ApiProperty({\n    description: 'ID of post that needs to be updated',\n    example: 1,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for patching user\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for patching user\n * @description DTO for patching user\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Post Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                featuredImageURL\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinTable, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToOne, ManyToOne, ManyToMany } from 'typeorm';\n\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { PostType } from '../enums/postType.enum';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { User } from 'src/users/entities/user.entity';\n\n/**\n * Post Entity\n * @description Schema for Post Table in Database\n * @property {number} id - Post ID\n * @property {string} title - Post title\n * @property {PostType} postType - Post type\n * @property {string} slug - Post slug\n * @property {PostStatus} status - Post status\n * @property {string} content - Post content\n * @property {string} schema - Post schema\n * @property {string} featuredImageURL - Post featured image URL\n * @property {Date} publishOn - Post publish date\n * @property {string[]} tags - Post tags\n * @property {CreatePostMetaOptionsDto[]} metaOptions - Post meta options\n */\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  @Column({ type: 'enum', enum: PostType, nullable: false, default: PostType.POST }) // prettier-ignore\n  postType: PostType;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    nullable: false,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  content?: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  schema?: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true, default: null })\n  featuredImageURL: string;\n\n  @Column({ type: 'timestamp', nullable: true, default: null })\n  publishOn?: Date;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  }) // ALTERNATIVE: to relations in service\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller responsible for handling posts data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'Post created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Route for handling create post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ApiOperation({summary: 'Delete a post'})@ApiResponse({status: 200, description: 'Post deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Route for handling delete post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId?')@ApiOperation({summary: 'Get all user posts'})@ApiResponse({status: 200, description: 'Post fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Route for handling get posts request\nExample :```html\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a post'})@ApiResponse({status: 200, description: 'Post updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Route for handling update post request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Param, Query, ParseIntPipe } from '@nestjs/common';\nimport { Get, Patch, Post, Delete } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { PostsService } from './providers/posts.service';\n\n/**\n * Controller responsible for handling posts data\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Route for handling get posts request\n   * @example HTTP GET /posts\n   * @example HTTP GET /posts/1\n   * @returns response\n   */\n  @Get(':userId?')\n  @ApiOperation({ summary: 'Get all user posts' })\n  @ApiResponse({ status: 200, description: 'Post fetched successfully' })\n  public getPosts(@Param('userId') userId: number) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Route for handling create post request\n   * @param createPostDto\n   * @example HTTP POST /posts\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Route for handling update post request\n   * @param patchPostDto\n   * @example HTTP PATCH /posts/1\n   * @returns response\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Update a post' })\n  @ApiResponse({ status: 200, description: 'Post updated successfully' })\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Route for handling delete post request\n   * @param id\n   * @example HTTP DELETE /posts/1\n   * @returns response\n   */\n  @Delete()\n  @ApiOperation({ summary: 'Delete a post' })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for posts\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { PostsController } from './posts.controller';\nimport { Post } from './entities/post.entity';\nimport { PostsService } from './providers/posts.service';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { UsersModule } from 'src/users/users.module';\n\n/**\n * Module for posts\n * @description Module for posts\n * @module PostsModule\n */\n@Module({\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing posts\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tagsService: TagsService, postsRepository: Repository, metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor of Posts service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:41\n                        \n                    \n\n\n            \n                \n                        The method to create a new post in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:155\n                        \n                    \n\n\n            \n                \n                        The method to remove a post from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:63\n                        \n                    \n\n\n            \n                \n                        The method to get all posts form the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:99\n                        \n                    \n\n\n            \n                \n                        The method to get a single post by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:118\n                        \n                    \n\n\n            \n                \n                        The method to update a post in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                any\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { Post } from '../entities/post.entity';\n\nimport { UsersService } from 'src/users/providers/users.service';\nimport { MetaOption } from 'src/meta-options/entities/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\n\n/**\n * Service responsible for managing posts\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor of Posts service\n   * @description Injects UsersService, PostRepository and MetaOptionRepository\n   * @param usersService\n   * @param postsRepository\n   * @param metaOptionRepository\n   */\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly tagsService: TagsService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new post in the database\n   * @param createPostDto\n   * @returns Post\n   */\n  public async create(createPostDto: CreatePostDto) {\n    try {\n      // Find author based on authorId from database\n      const author = await this.usersService.findOneById(createPostDto.authorId); // prettier-ignore\n\n      // Find tags\n      const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n      // Create post\n      const post = this.postsRepository.create({ ...createPostDto, author, tags }); // prettier-ignore\n\n      // Return post\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get all posts form the database\n   * @returns Post[]\n   */\n  public async findAll(userId: number) {\n    try {\n      if (userId) {\n        const author = await this.usersService.findOneById(userId);\n\n        const posts = await this.postsRepository.find({\n          where: { author },\n          relations: { metaOptions: true, author: true, tags: true }, // ALTERNATIVE: to eager loading in entity\n        });\n\n        if (!posts) {\n          throw new NotFoundException('No posts found');\n        }\n\n        return posts;\n      } else {\n        const posts = await this.postsRepository.find({\n          relations: { metaOptions: true, author: true, tags: true }, // ALTERNATIVE: to eager loading in entity\n        });\n\n        if (!posts) {\n          throw new NotFoundException('No posts found');\n        }\n\n        return posts;\n      }\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get a single post by ID\n   * @param id\n   * @returns Post\n   */\n  public async findOne(id: number) {\n    try {\n      const post = await this.postsRepository.findOne({ where: { id } });\n\n      if (!post) {\n        throw new NotFoundException('No post found');\n      }\n\n      return post;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to update a post in the database\n   * @param patchPostDto\n   * @returns any\n   */\n  public async update(patchPostDto: PatchPostDto) {\n    try {\n      // Find new tags\n      const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n\n      // Find the post\n      const post = await this.postsRepository.findOneBy({\n        id: patchPostDto.id,\n      });\n\n      if (!post) {\n        throw new NotFoundException('Post not found');\n      }\n\n      // Update post related properties (Nullish coalescing operator)\n      post.title = patchPostDto.title ?? post.title;\n      post.content = patchPostDto.content ?? post.content;\n      post.status = patchPostDto.status ?? post.status;\n      post.postType = patchPostDto.postType ?? post.postType;\n      post.slug = patchPostDto.slug ?? post.slug;\n      post.featuredImageURL = patchPostDto.featuredImageURL ?? post.featuredImageURL; // prettier-ignore\n      post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n      // Update the tags\n      post.tags = tags;\n\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to remove a post from the database\n   * @param id\n   * @returns string\n   */\n  public async delete(id: number) {\n    try {\n      // Delete the post\n      await this.postsRepository.delete(id);\n\n      // Return confirmation message\n      return { deleted: true, id };\n    } catch (error) {\n      throw new NotFoundException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageURL\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\nimport { ManyToMany } from 'typeorm';\n\nimport { Post } from 'src/posts/entities/post.entity';\n\n/**\n * Tag Entity\n * @description Tag Entity\n * @property {number} id - Tag ID\n * @property {string} name - Tag name\n * @property {string} slug - Tag slug\n * @property {string} description - Tag description\n * @property {string} schema - Tag schema\n * @property {string} featuredImageURL - Tag featured image URL\n * @property {Post} post - Posts associated to tag\n * @property {Date} createDate - Tag create date\n * @property {Date} updateDate - Tag update date\n * @property {Date} deletedAt - Tag delete date\n */\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  name: string;\n\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  description?: string;\n\n  @Column({ type: 'text', nullable: true, default: null })\n  schema?: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: true, default: null })\n  featuredImageURL?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, { onDelete: 'CASCADE' })\n  posts: Post[];\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n\n  //   https://typeorm.io/decorator-reference\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for tags\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new tag'})@ApiResponse({status: 201, description: 'Tag created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Route for handling create tag request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a tag'})@ApiResponse({status: 201, description: 'Tag deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Route for handling delete tag request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft-delete')@ApiOperation({summary: 'Soft delete a tag'})@ApiResponse({status: 201, description: 'Tag soft-deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Route for handling delete tag request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, ParseIntPipe } from '@nestjs/common';\nimport { Post, Delete, Param } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n/**\n * Controller for tags\n */\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Route for handling create tag request\n   * @param createTagDto\n   * @example HTTP POST /tags\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new tag' })\n  @ApiResponse({ status: 201, description: 'Tag created successfully' })\n  public async createTag(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Route for handling delete tag request\n   * @param id\n   * @example HTTP DELETE /tags\n   * @returns response\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a tag' })\n  @ApiResponse({ status: 201, description: 'Tag deleted successfully' })\n  public async deleteTag(@Param('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Route for handling delete tag request\n   * @param id\n   * @example HTTP DELETE /tags\n   * @returns response\n   */\n  @Delete(':id/soft-delete')\n  @ApiOperation({ summary: 'Soft delete a tag' })\n  @ApiResponse({ status: 201, description: 'Tag soft-deleted successfully' })\n  public async softDeleteTag(@Param('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for tags\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Tag } from './tag.entity';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\n\n/**\n * Module for tags\n * @description Module for tags\n * @module TagsModule\n */\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tags\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of Tags Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:29\n                        \n                    \n\n\n            \n                \n                        The method to create a new tag in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:64\n                        \n                    \n\n\n            \n                \n                        The method to delete a tag in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:43\n                        \n                    \n\n\n            \n                \n                        The method to create find multiple tags in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Tag[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:84\n                        \n                    \n\n\n            \n                \n                        The method to soft delete a tag in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\n\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { Tag } from '../tag.entity';\n\n/**\n * Service responsible for managing tags\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Constructor of Tags Service\n   * @description Injects tagsRepository\n   * @param tagRepository\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new tag in the database\n   * @param createTagDto\n   * @returns Post\n   */\n  public async create(createTagDto: CreateTagDto) {\n    try {\n      const tag = this.tagsRepository.create(createTagDto);\n      return await this.tagsRepository.save(tag);\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to create find multiple tags in the database\n   * @param tags\n   * @returns Tag[]\n   */\n  public async findMultipleTags(tags: number[]) {\n    try {\n      const results = await this.tagsRepository.find({\n        where: { id: In(tags) },\n      });\n\n      if (!results) {\n        throw new NotFoundException('Tags not found.');\n      }\n\n      return results;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to delete a tag in the database\n   * @param id\n   * @returns response\n   */\n  public async delete(id: number) {\n    try {\n      const tag = await this.tagsRepository.findOneBy({ id });\n\n      if (!tag) {\n        throw new NotFoundException('Tag does not exist.');\n      }\n\n      await this.tagsRepository.delete(id);\n      return { deleted: true, id };\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to soft delete a tag in the database\n   * @param id\n   * @returns response\n   */\n  public async softDelete(id: number) {\n    try {\n      const tag = await this.tagsRepository.findOneBy({ id });\n\n      if (!tag) {\n        throw new NotFoundException('Tag does not exist.');\n      }\n\n      await this.tagsRepository.softDelete(id);\n      return { deleted: true, id };\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                isAuth\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isAuth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { OneToMany } from 'typeorm';\n\nimport { Post } from 'src/posts/entities/post.entity';\n\n/**\n * User Entity\n * @description User Entity\n * @column id: User ID {number}\n * @column firstName: User first name {string}\n * @column lastName: User last name {string}\n * @column email: User email {string}\n * @column password: User password {string}\n * @column isAuth: User authentication status {boolean}\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly firstName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  lastName?: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  readonly email: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  password: string;\n\n  @Column({ type: 'boolean', nullable: false, default: false })\n  isAuth: boolean;\n\n  @OneToMany(() => Post, (posts) => posts.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller responsible for handling users data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Route for handling create user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a user'})@ApiResponse({status: 200, description: 'User deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Route for handling delete user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, getUsersQueryDto: GetUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id?')@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number', example: 1})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Limit', example: 10})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Route for handling get users request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                getUsersQueryDto\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(id: number, patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user'})@ApiResponse({status: 200, description: 'User updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        Route for handling patch user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n// import { DefaultValuePipe, ParseIntPipe } from '@nestjs/common';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { GetUsersQueryDto } from './dtos/get-users-query.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\n\n/**\n * Controller responsible for handling users data\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Route for handling get users request\n   * @param getUsersParamDto\n   * @param page\n   * @param limit\n   * @example HTTP GET /users\n   * @returns response\n   */\n  @Get(':id?')\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully' })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n    example: 1,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Limit',\n    example: 10,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query() getUsersQueryDto: GetUsersQueryDto,\n    // @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    // @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n  ) {\n    const id = getUsersParamDto.id;\n    const response = this.usersService.findAll(id, getUsersQueryDto);\n    return response;\n  }\n\n  /**\n   * Route for handling create user request\n   * @example HTTP POST /user\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Route for handling patch user request\n   * @param id\n   * @param patchUserDto\n   * @example HTTP PATCH /user\n   * @returns response\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  public patchUser(\n    @Param('id') id: number,\n    @Body() patchUserDto: PatchUserDto,\n  ) {\n    return patchUserDto;\n  }\n\n  /**\n   * Route for handling delete user request\n   * @param payload\n   * @example HTTP DELETE /user\n   * @returns response\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  public deleteUser(@Param('id') id: number, @Body() payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for users\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { Post } from 'src/posts/entities/post.entity';\nimport profileConfig from './config/profile.config';\n\n/**\n * Module for users\n * @description Module for users\n * @module UsersModule\n */\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User, Post]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileConfiguration: ConfigType<>, authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of User service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:39\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                newUser\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(id?: number, query?: GetUsersQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:69\n                        \n                    \n\n\n            \n                \n                        The method to get all users form the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                an object containing data and message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:101\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                an empty array or an array of found user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfigType } from '@nestjs/config';\n\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { GetUsersQueryDto } from '../dtos/get-users-query.dto';\nimport { User } from '../entities/user.entity';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service responsible for managing users\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor of User service\n   * @description Injects AuthService and UserRepository\n   * @param authService\n   * @param userRepository\n   */\n  constructor(\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   * @description The method to create a new user in the database\n   * @param createUserDto\n   * @returns newUser\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    try {\n      // Check if user already exists with same email\n      const existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n\n      // TODO: Handle exception\n      if (existingUser) {\n        throw new BadRequestException('User already exists');\n      }\n\n      // Create User\n      let newUser = this.userRepository.create(createUserDto);\n      newUser = await this.userRepository.save(newUser);\n\n      return newUser;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to get all users form the database\n   * @description The method to get all users form the database\n   * @param id\n   * @param page\n   * @param limit\n   * @returns an object containing data and message\n   */\n  public async findAll(id?: number, query?: GetUsersQueryDto) {\n    const { page, limit } = query;\n\n    try {\n      if (id) {\n        const response = await this.findOneById(id);\n        return response;\n      }\n\n      const [users] = await this.userRepository.findAndCount({\n        skip: (page - 1) * limit,\n        take: limit,\n      });\n\n      if (!users.length) {\n        throw new NotFoundException('No users found');\n      }\n\n      const data = users.slice((page - 1) * limit, page * limit);\n\n      return data;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @description The method to find a single user by ID\n   * @param id\n   * @returns an empty array or an array of found user\n   */\n  public async findOneById(id: number) {\n    try {\n      const user = await this.userRepository.findOneBy({ id });\n\n      if (!user) {\n        throw new NotFoundException('No user found');\n      }\n\n      return user;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/config/environment.validation.ts\n            \n            variable\n            environmentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/entities/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersQueryDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap the application\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            environmentSchema   (src/.../environment.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/environment.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  NODE_ENV: Joi.string()\n    .valid('development', 'production', 'test', 'staging')\n    .required()\n    .default('development'),\n  DATABASE_PORT: Joi.number().port().default(5432),\n  DATABASE_HOST: Joi.string().required(),\n  DATABASE_USER: Joi.string().required(),\n  DATABASE_PASSWORD: Joi.string().required(),\n  DATABASE_NAME: Joi.string().required(),\n  PROFILE_API_KEY: Joi.string().required(),\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
